{"/home/travis/build/npmtest/node-npmtest-mailchimp/test.js":"/* istanbul instrument in package npmtest_mailchimp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailchimp/lib.npmtest_mailchimp.js":"/* istanbul instrument in package npmtest_mailchimp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mailchimp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mailchimp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mailchimp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mailchimp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mailchimp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mailchimp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mailchimp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mailchimp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mailchimp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mailchimp.__dirname + '/lib.npmtest_mailchimp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/index.js":"exports.MailChimpAPI = require('./MailChimpAPI.js');\nexports.MailChimpExportAPI = require('./MailChimpExportAPI.js');\nexports.MailChimpWebhook = require('./MailChimpWebhook.js');\nexports.MailChimpOAuth = require('./MailChimpOAuth.js');\nexports.MailChimpPartnerAPI = require('./MailChimpPartnerAPI.js');\nexports.MandrillAPI = require('./MandrillAPI.js');","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpAPI.js":"var MailChimpAPI_v2_0 = require('./MailChimpAPI_v2_0'),\n    MailChimpAPI_v1_3 = require('./MailChimpAPI_v1_3'),\n    MailChimpAPI_v1_2 = require('./MailChimpAPI_v1_2'),\n    MailChimpAPI_v1_1 = require('./MailChimpAPI_v1_1'),\n    fs = require('fs');\n\n/**\n * Returns a MailChimp API wrapper object of the specified version. All API\n * versions available at the time of writing (1.1, 1.2 and 1.3) are supported.\n *\n * Available options are:\n *  - version   The API version to use (1.1, 1.2 or 1.3). Defaults to 1.3.\n *  - secure    Whether or not to use secure connections over HTTPS\n *              (true/false). Defaults to false.\n *  - userAgent Custom User-Agent description to use in the request header.\n *\n * @param apiKey The API key to access the MailChimp API with\n * @param options Configuration options as described above\n * @return Instance of the MailChimp API in the specified version\n */\nfunction MailChimpAPI (apiKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tif (!apiKey)\n\t\tthrow new Error('You have to provide an API key for this to work.');\n\n\ttry {\n\t\tvar packageInfo = fs.readFileSync(__dirname+\"/../../package.json\");\n\t} catch (error) {\n\t\tthrow new Error('Required package file package.json not found for this module.');\n\t}\n\toptions.packageInfo = JSON.parse(packageInfo.toString());\n\n\tif (!options.version || options.version == '1.3')\n\t\treturn new MailChimpAPI_v1_3(apiKey, options);\n\telse if (options.version == '2.0')\n\t\treturn new MailChimpAPI_v2_0(apiKey, options);\n\telse if (options.version == '1.2')\n\t\treturn new MailChimpAPI_v1_2(apiKey, options);\n\telse if (options.version == '1.1')\n\t\treturn new MailChimpAPI_v1_1(apiKey, options);\n\telse\n\t\tthrow new Error('Version ' + options.version + ' of the MailChimp API is currently not supported.');\n\n}\n\nmodule.exports = MailChimpAPI;","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpAPI_v2_0.js":"var http \t= require('http');\nvar request = require('request');\nvar helpers = require('./helpers');\n\n/**\n * MailChimp API wrapper for the API version 2.0. This object should not be\n * instantiated directly but by using the version wrapper {@link MailChimpAPI}.\n *\n * @param apiKey The API key to access the MailChimp API with\n * @param options Configuration options\n * @return Instance of {@link MailChimpAPI_v2_0}\n */\nfunction MailChimpAPI_v2_0 (apiKey, options) {\n\n\toptions = options || {};\n\n\tthis.version     = '2.0';\n\tthis.apiKey      = apiKey;\n\tthis.packageInfo = options.packageInfo;\n\tthis.datacenter  = apiKey.split('-');\n\tthis.datacenter  = this.datacenter[1];\n\tthis.httpHost    = this.datacenter+'.api.mailchimp.com';\n\tthis.httpUri     = 'https://'+this.httpHost+':443';\n\tthis.userAgent   = options.userAgent+' ' || '';\n\n}\n\nmodule.exports = MailChimpAPI_v2_0;\n\n/**\n * Sends a given request as a HTTP POST (application/x-www-form-urlencoded) to\n * the MailChimp API and finally calls the given callback function with the\n * resulting JSON object. This method should not be called directly but will be\n * used internally by all API methods defined.\n *\n * @param method MailChimp API method to call\n * @param availableParams Parameters available for the specified API method\n * @param givenParams Parameters to call the MailChimp API with\n * @param callback Callback function to call on success\n */\nMailChimpAPI_v2_0.prototype.execute = function (method, availableParams, givenParams, callback) {\n\n\tvar finalParams = { apikey : this.apiKey };\n\tvar currentParam;\n\n\tfor (var i = 0; i < availableParams.length; i++) {\n\t\tcurrentParam = availableParams[i];\n\t\tif (typeof givenParams[currentParam] !== 'undefined')\n\t\t\tfinalParams[currentParam] = givenParams[currentParam];\n\t}\n\n\trequest({\n\t\turi : this.httpUri+'/'+this.version+'/'+method,\n\t\tmethod: 'POST',\n\t\theaders : { 'User-Agent' : this.userAgent+'node-mailchimp/'+this.packageInfo.version, \"accept-encoding\" : \"gzip,deflate\" },\n\t\tgzip: true,\n\t\tbody : JSON.stringify(finalParams)\n\t}, function (error, response, body) {\n\t\thelpers.handleMailChimpResponse(error, response, body, callback);\n\t});\n\n};\n\n/**\n * You can either call the API methods directly or using this function which\n * assembles the name of the API method from a given method section and\n * method name. Sections and methods are described in the MailChimp API\n * Documentation.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/\n *\n * @param section The section of the API method to call (e.g. 'users')\n * @param method The method to call in the given section\n * @param params Parameters to pass to the API method\n * @param callback Callback function for returned data or errors\n */\n\nMailChimpAPI_v2_0.prototype.call = function (section, method, params, callback) {\n\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tif (typeof section != 'string' || typeof method != 'string') {\n\t\tcallback(new Error('You have to provide the section and the name of the method to call.'));\n\t\treturn;\n\t}\n\n\tvar methodToCall = section+'_'+method.replace(/\\-/g, '_');\n\n\tif (typeof this[methodToCall] == 'function') {\n\t\tthis[methodToCall](params, callback);\n\t} else {\n\t\tcallback(new Error('The API method '+methodToCall+' does not exist.'));\n\t\treturn;\n\t}\n\n};\n\n/*****************************************************************************/\n/************************* Campaign Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Get the content (both html and text) for a campaign either as it would\n * appear in the campaign archive or as the raw, original content.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/content.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_content = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/content', [\n\t\t'cid',\n\t\t'options',\n\t], params, callback);\n};\n\n/**\n * Create a new draft campaign to send. You can not have more than 32,000\n * campaigns in your account.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/create.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_create = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/create', [\n\t\t'type',\n\t\t'options',\n\t\t'content',\n\t\t'segment_opts',\n\t\t'type_opts',\n\t], params, callback);\n};\n\n/**\n * Delete a campaign. Seriously, \"poof, gone!\" - be careful! Seriously, no one\n * can undelete these.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/delete.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_delete = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/delete', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Get the list of campaigns and their details matching the specified filters.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/list.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_list = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/list', [\n\t\t'filters',\n\t\t'start',\n\t\t'limit',\n\t\t'sort_field',\n\t\t'sort_dir',\n\t], params, callback);\n};\n\n/**\n * Pause an AutoResponder or RSS campaign from sending.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/pause.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_pause = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/pause', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Replicate a campaign.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/replicate.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_replicate = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/replicate', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Resume sending an AutoResponder or RSS campaign.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/resume.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_resume = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/resume', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Schedule a campaign to be sent in batches sometime in the future. Only valid\n * for \"regular\" campaigns.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/schedule-batch.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_schedule_batch = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/schedule-batch', [\n\t\t'cid',\n\t\t'schedule_time',\n\t\t'num_batches',\n\t\t'stagger_mins',\n\t], params, callback);\n};\n\n/**\n * Schedule a campaign to be sent in the future.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/schedule.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_schedule = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/schedule', [\n\t\t'cid',\n\t\t'schedule_time',\n\t\t'schedule_time_b',\n\t], params, callback);\n};\n\n/**\n * Allows one to test their segmentation rules before creating a campaign using\n * them.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/segment-test.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_segment_test = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/segment-test', [\n\t\t'list_id',\n\t\t'options',\n\t], params, callback);\n};\n\n/**\n * Send a given campaign immediately. For RSS campaigns, this will \"start\"\n * them.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/send.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_send = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/send', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Send a test of this campaign to the provided email addresses.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/send-test.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_send_test = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/send-test', [\n\t\t'cid',\n\t\t'test_emails',\n\t\t'send_type',\n\t], params, callback);\n};\n\n/**\n * Get the HTML template content sections for a campaign. Note that this will\n * return very jagged, non-standard results based on the template a campaign is\n * using. You only want to use this if you want to allow editing template\n * sections in your application.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/template-content.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_template_content = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/template-content', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Unschedule a campaign that is scheduled to be sent in the future.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/unschedule.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_unschedule = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/unschedule', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Update just about any setting besides type for a campaign that has not been\n * sent. See campaignCreate() for details. Caveats!:\n *\n *  - If you set a new list_id, all segmentation options will be deleted and\n *    must be re-added.\n *  - If you set template_id, you need to follow that up by setting it's\n *    'content'\n *  - If you set segment_opts, you should have tested your options against\n *    campaignSegmentTest() as campaignUpdate() will not allow you to set a\n *    segment that includes no members.\n *  - To clear/unset segment_opts, pass an empty string or array as the value.\n *    Various wrappers may require one or the other.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/campaigns/update.php\n */\nMailChimpAPI_v2_0.prototype.campaigns_update = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('campaigns/update', [\n\t\t'cid',\n\t\t'name',\n\t\t'value',\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/*************************** Ecomm Related Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Import Ecommerce Order Information to be used for Segmentation. This will\n * generally be used by ecommerce package plugins provided by us or by 3rd\n * part system developers.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/ecomm/order-add.php\n */\nMailChimpAPI_v2_0.prototype.ecomm_order_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('ecomm/order-add', [\n\t\t'order',\n\t], params, callback);\n};\n\n/**\n * Delete Ecommerce Order Information used for segmentation. This will\n * generally be used by ecommerce package plugins that we provide or by 3rd\n * part system developers.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/ecomm/order-del.php\n */\nMailChimpAPI_v2_0.prototype.ecomm_order_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('ecomm/order-del', [\n\t\t'store_id',\n\t\t'order_id',\n\t], params, callback);\n};\n\n/**\n * Retrieve the Ecommerce Orders for an account.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/ecomm/orders.php\n */\nMailChimpAPI_v2_0.prototype.ecomm_orders = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('ecomm/orders', [\n\t\t'cid',\n\t\t'start',\n\t\t'limit',\n\t\t'since',\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/************************** Folder Related Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Add a new folder to file campaigns, autoresponders, or templates in.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/folders/add.php\n */\nMailChimpAPI_v2_0.prototype.folders_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('folders/add', [\n\t\t'name',\n\t\t'type',\n\t], params, callback);\n};\n\n/**\n * Delete a campaign, autoresponder, or template folder. Note that this will\n * simply make whatever was in the folder appear unfiled, no other data is\n * removed.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/folders/del.php\n */\nMailChimpAPI_v2_0.prototype.folders_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('folders/del', [\n\t\t'fid',\n\t\t'type',\n\t], params, callback);\n};\n\n/**\n * List all the folders of a certain type.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/folders/list.php\n */\nMailChimpAPI_v2_0.prototype.folders_list = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('folders/list', [\n\t\t'type',\n\t], params, callback);\n};\n\n/**\n * Update the name of a folder for campaigns, autoresponders, or templates.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/folders/update.php\n */\nMailChimpAPI_v2_0.prototype.folders_update = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('folders/update', [\n\t\t'fid',\n\t\t'name',\n\t\t'type',\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/*************************** Lists Related Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Get all email addresses that complained about a campaign sent to a list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/abuse-reports.php\n */\nMailChimpAPI_v2_0.prototype.lists_abuse_reports = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/abuse-reports', [\n\t\t'id',\n\t\t'start',\n\t\t'limit',\n\t\t'since',\n\t], params, callback);\n};\n\n/**\n * Access up to the previous 180 days of daily detailed aggregated activity\n * stats for a given list. Does not include AutoResponder activity.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/activity.php\n */\nMailChimpAPI_v2_0.prototype.lists_activity = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/activity', [\n\t\t'id',\n\t], params, callback);\n};\n\n/**\n * Subscribe a batch of email addresses to a list at once. If you are using a\n * serialized version of the API, we strongly suggest that you only run this\n * method as a POST request, and not a GET request. Maximum batch sizes vary\n * based on the amount of data in each record, though you should cap them at\n * 5k - 10k records, depending on your experience. These calls are also long,\n * so be sure you increase your timeout values.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/batch-subscribe.php\n */\nMailChimpAPI_v2_0.prototype.lists_batch_subscribe = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/batch-subscribe', [\n\t\t'id',\n\t\t'batch',\n\t\t'double_optin',\n\t\t'update_existing',\n\t\t'replace_interests',\n\t], params, callback);\n};\n\n/**\n * Unsubscribe a batch of email addresses from a list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/batch-unsubscribe.php\n */\nMailChimpAPI_v2_0.prototype.lists_batch_unsubscribe = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/batch-unsubscribe', [\n\t\t'id',\n\t\t'batch',\n\t\t'delete_member',\n\t\t'send_goodbye',\n\t\t'send_notify',\n\t], params, callback);\n};\n\n/**\n * Retrieve the clients that the list's subscribers have been tagged as being\n * used based on user agents seen. Made possible by user-agent-string.info.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/clients.php\n */\nMailChimpAPI_v2_0.prototype.lists_clients = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/clients', [\n\t\t'id',\n\t], params, callback);\n};\n\n/**\n * Access the Growth History by Month for a given list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/growth-history.php\n */\nMailChimpAPI_v2_0.prototype.lists_growth_history = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/growth-history', [\n\t\t'id',\n\t], params, callback);\n};\n\n/**\n * Add a single Interest Group - if interest groups for the List are not yet\n * enabled, adding the first group will automatically turn them on.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/interest-group-add.php\n */\nMailChimpAPI_v2_0.prototype.lists_interest_group_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/interest-group-add', [\n\t\t'id',\n\t\t'group_name',\n\t\t'grouping_id',\n\t], params, callback);\n};\n\n/**\n * Delete a single Interest Group - if the last group for a list is deleted,\n * this will also turn groups for the list off.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/interest-group-del.php\n */\nMailChimpAPI_v2_0.prototype.lists_interest_group_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/interest-group-del', [\n\t\t'id',\n\t\t'group_name',\n\t\t'grouping_id',\n\t], params, callback);\n};\n\n/**\n * Change the name of an Interest Group.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/interest-group-update.php\n */\nMailChimpAPI_v2_0.prototype.lists_interest_group_update = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/interest-group-update', [\n\t\t'id',\n\t\t'old_name',\n\t\t'new_name',\n\t\t'grouping_id',\n\t], params, callback);\n};\n\n/**\n * Add a new Interest Grouping - if interest groups for the List are not yet\n * enabled, adding the first grouping will automatically turn them on.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/interest-grouping-add.php\n */\nMailChimpAPI_v2_0.prototype.lists_interest_grouping_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/interest-grouping-add', [\n\t\t'id',\n\t\t'name',\n\t\t'type',\n\t\t'groups',\n\t], params, callback);\n};\n\n/**\n * Delete an existing Interest Grouping - this will permanently delete all\n * contained interest groups and will remove those selections from all list\n * members.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/interest-grouping-del.php\n */\nMailChimpAPI_v2_0.prototype.lists_interest_grouping_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/interest-grouping-del', [\n\t\t'grouping_id',\n\t], params, callback);\n};\n\n/**\n * Update an existing Interest Grouping.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/interest-grouping-update.php\n */\nMailChimpAPI_v2_0.prototype.lists_interest_grouping_update = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/interest-grouping-update', [\n\t\t'grouping_id',\n\t\t'name',\n\t\t'value',\n\t], params, callback);\n};\n\n/**\n * Get the list of interest groupings for a given list, including the label,\n * form information, and included groups for each.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/interest-groupings.php\n */\nMailChimpAPI_v2_0.prototype.lists_interest_groupings = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/interest-groupings', [\n\t\t'id',\n\t\t'counts',\n\t], params, callback);\n};\n\n/**\n * Retrieve all of the lists defined for your user account.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/list.php\n */\nMailChimpAPI_v2_0.prototype.lists_list = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/list', [\n\t\t'filters',\n\t\t'start',\n\t\t'limit',\n\t\t'sort_field',\n\t\t'sort_dir',\n\t], params, callback);\n};\n\n/**\n * Retrieve the locations (countries) that the list's subscribers have been\n * tagged to based on geocoding their IP address.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/locations.php\n */\nMailChimpAPI_v2_0.prototype.lists_locations = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/locations', [\n\t\t'id',\n\t], params, callback);\n};\n\n/**\n * Get the most recent 100 activities for particular list members (open, click,\n * bounce, unsub, abuse, sent to, etc.)\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/member-activity.php\n */\nMailChimpAPI_v2_0.prototype.lists_member_activity = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/member-activity', [\n\t\t'id',\n\t\t'emails',\n\t], params, callback);\n};\n\n/**\n * Get all the information for particular members of a list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/member-info.php\n */\nMailChimpAPI_v2_0.prototype.lists_member_info = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/member-info', [\n\t\t'id',\n\t\t'emails',\n\t], params, callback);\n};\n\n/**\n * Get all of the list members for a list that are of a particular status and\n * potentially matching a segment. This will cause locking, so don't run\n * multiples at once. Are you trying to get a dump including lots of merge data\n * or specific members of a list? If so, checkout the List Export API.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/members.php\n */\nMailChimpAPI_v2_0.prototype.lists_members = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/members', [\n\t\t'id',\n\t\t'status',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Add a new merge tag to a given list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/merge-var-add.php\n */\nMailChimpAPI_v2_0.prototype.lists_merge_var_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/merge-var-add', [\n\t\t'id',\n\t\t'tag',\n\t\t'name',\n\t\t'options',\n\t], params, callback);\n};\n\n/**\n * Delete a merge tag from a given list and all its members. Seriously - the\n * data is removed from all members as well! Note that on large lists this\n * method may seem a bit slower than calls you typically make.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/merge-var-del.php\n */\nMailChimpAPI_v2_0.prototype.lists_merge_var_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/merge-var-del', [\n\t\t'id',\n\t\t'tag',\n\t], params, callback);\n};\n\n/**\n * Completely resets all data stored in a merge var on a list. All data is\n * removed and this action can not be undone.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/merge-var-reset.php\n */\nMailChimpAPI_v2_0.prototype.lists_merge_var_reset = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/merge-var-reset', [\n\t\t'id',\n\t\t'tag',\n\t], params, callback);\n};\n\n/**\n * Sets a particular merge var to the specified value for every list member.\n * Only merge var ids 1 - 30 may be modified this way. This is generally a\n * dirty method unless you're fixing data since you should probably be using\n * default_values and/or conditional content. as with lists/merge-var-reset(),\n * this can not be undone.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/merge-var-set.php\n */\nMailChimpAPI_v2_0.prototype.lists_merge_var_set = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/merge-var-set', [\n\t\t'id',\n\t\t'tag',\n\t\t'value',\n\t], params, callback);\n};\n\n/**\n * Update most parameters for a merge tag on a given list. You cannot currently\n * change the merge type.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/merge-var-update.php\n */\nMailChimpAPI_v2_0.prototype.lists_merge_var_update = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/merge-var-update', [\n\t\t'id',\n\t\t'tag',\n\t\t'options',\n\t], params, callback);\n};\n\n/**\n * Get the list of merge tags for a given list, including their name, tag, and\n * required setting.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/merge-vars.php\n */\nMailChimpAPI_v2_0.prototype.lists_merge_vars = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/merge-vars', [\n\t\t'id',\n\t], params, callback);\n};\n\n/**\n * Save a segment against a list for later use. There is no limit to the number\n * of segments which can be saved. Static Segments are not tied to any merge data,\n * interest groups, etc. They essentially allow you to configure an unlimited\n * number of custom segments which will have standard performance. When using\n * proper segments, Static Segments are one of the available options for\n * segmentation just as if you used a merge var (and they can be used with other\n * segmentation options), though performance may degrade at that point. Saved\n * Segments (called \"auto-updating\" in the app) are essentially just the\n * match+conditions typically used.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/static-segment-add.php\n */\nMailChimpAPI_v2_0.prototype.lists_segment_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/segment-add', [\n\t\t'id',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Save a segment against a list for later use. There is no limit to the number\n * of segments which can be saved. Static Segments are not tied to any merge\n * data, interest groups, etc. They essentially allow you to configure an\n * unlimited number of custom segments which will have standard performance.\n * When using proper segments, Static Segments are one of the available options\n * for segmentation just as if you used a merge var (and they can be used with\n * other segmentation options), though performance may degrade at that point.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/static-segment-add.php\n */\nMailChimpAPI_v2_0.prototype.lists_static_segment_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/static-segment-add', [\n\t\t'id',\n\t\t'name',\n\t], params, callback);\n};\n\n/**\n * Delete a static segment. Note that this will, of course, remove any member\n * affiliations with the segment.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/static-segment-del.php\n */\nMailChimpAPI_v2_0.prototype.lists_static_segment_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/static-segment-del', [\n\t\t'id',\n\t\t'seg_id',\n\t], params, callback);\n};\n\n/**\n * Add list members to a static segment. It is suggested that you limit batch\n * size to no more than 10,000 addresses per call. Email addresses must exist\n * on the list in order to be included - this will not subscribe them to the\n * list!\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/static-segment-members-add.php\n */\nMailChimpAPI_v2_0.prototype.lists_static_segment_members_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/static-segment-members-add', [\n\t\t'id',\n\t\t'seg_id',\n\t\t'batch',\n\t], params, callback);\n};\n\n/**\n * Remove list members from a static segment. It is suggested that you limit\n * batch size to no more than 10,000 addresses per call. Email addresses must\n * exist on the list in order to be removed - this will not unsubscribe them\n * from the list!\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/static-segment-members-del.php\n */\nMailChimpAPI_v2_0.prototype.lists_static_segment_members_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/static-segment-members-del', [\n\t\t'id',\n\t\t'seg_id',\n\t\t'batch',\n\t], params, callback);\n};\n\n/**\n * Resets a static segment - removes all members from the static segment. Note:\n * does not actually affect list member data.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/static-segment-reset.php\n */\nMailChimpAPI_v2_0.prototype.lists_static_segment_reset = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/static-segment-reset', [\n\t\t'id',\n\t\t'seg_id',\n\t], params, callback);\n};\n\n/**\n * Retrieve all of the Static Segments for a list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/static-segments.php\n */\nMailChimpAPI_v2_0.prototype.lists_static_segments = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/static-segments', [\n\t\t'id',\n\t], params, callback);\n};\n\n/**\n * Retrieve all of the Segments for a list.\n * For accessing the saved/static results you will find:\n *     data.saved[]\n *     data.static[]\n * Also supports type parameter for \"static\" or \"saved\"\n * @see http://apidocs.mailchimp.com/api/2.0/lists/segments.php\n */\nMailChimpAPI_v2_0.prototype.lists_segments = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/segments', [\n\t\t'id',\n\t\t'type',\n\t], params, callback);\n};\n\n/**\n * Subscribe the provided email to a list. By default this sends a confirmation\n * email - you will not see new members until the link contained in it is\n * clicked!\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/subscribe.php\n */\nMailChimpAPI_v2_0.prototype.lists_subscribe = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/subscribe', [\n\t\t'id',\n\t\t'email',\n\t\t'merge_vars',\n\t\t'email_type',\n\t\t'double_optin',\n\t\t'update_existing',\n\t\t'replace_interests',\n\t\t'send_welcome',\n\t], params, callback);\n};\n\n/**\n * Unsubscribe the given email address from the list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/unsubscribe.php\n */\nMailChimpAPI_v2_0.prototype.lists_unsubscribe = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/unsubscribe', [\n\t\t'id',\n\t\t'email',\n\t\t'delete_member',\n\t\t'send_goodbye',\n\t\t'send_notify',\n\t], params, callback);\n};\n\n/**\n * Edit the email address, merge fields, and interest groups for a list member.\n * If you are doing a batch update on lots of users, consider using\n * listBatchSubscribe() with the update_existing and possible replace_interests\n * parameter.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/update-member.php\n */\nMailChimpAPI_v2_0.prototype.lists_update_member = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/update-member', [\n\t\t'id',\n\t\t'email',\n\t\t'merge_vars',\n\t\t'email_type',\n\t\t'replace_interests',\n\t], params, callback);\n};\n\n/**\n * Add a new Webhook URL for the given list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/webhook-add.php\n */\nMailChimpAPI_v2_0.prototype.lists_webhook_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/webhook-add', [\n\t\t'id',\n\t\t'url',\n\t\t'actions',\n\t\t'sources',\n\t], params, callback);\n};\n\n/**\n * Delete an existing Webhook URL from a given list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/webhook-del.php\n */\nMailChimpAPI_v2_0.prototype.lists_webhook_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/webhook-del', [\n\t\t'id',\n\t\t'url',\n\t], params, callback);\n};\n\n/**\n * Return the Webhooks configured for the given list.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/lists/webhooks.php\n */\nMailChimpAPI_v2_0.prototype.lists_webhooks = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('lists/webhooks', [\n\t\t'id',\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/************************** Helper Related Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Retrieve lots of account information including payments made, plan info,\n * some account stats, installed modules, contact info, and more. No private\n * information like Credit Card numbers is available.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/account-details.php\n */\nMailChimpAPI_v2_0.prototype.helper_account_details = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/account-details', [\n\t\t'id',\n\t\t'exclude',\n\t], params, callback);\n};\n\n/**\n * Retrieve minimal data for all Campaigns a member was sent.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/campaigns-for-email.php\n */\nMailChimpAPI_v2_0.prototype.helper_campaigns_for_email = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/campaigns-for-email', [\n\t\t'email',\n\t\t'options',\n\t], params, callback);\n};\n\n/**\n * Return the current Chimp Chatter messages for an account.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/chimp-chatter.php\n */\nMailChimpAPI_v2_0.prototype.helper_chimp_chatter = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/chimp-chatter', [\n\t], params, callback);\n};\n\n/**\n * Have HTML content auto-converted to a text-only format. You can send: plain\n * HTML, an existing Campaign Id, or an existing Template Id. Note that this\n * will not save anything to or update any of your lists, campaigns, or\n * templates. It's also not just Lynx and is very fine tuned for our template\n * layouts - your mileage may vary.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/generate-text.php\n */\nMailChimpAPI_v2_0.prototype.helper_generate_text = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/generate-text', [\n\t\t'type',\n\t\t'content',\n\t], params, callback);\n};\n\n/**\n * Send your HTML content to have the CSS inlined and optionally remove the\n * original styles.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/inline-css.php\n */\nMailChimpAPI_v2_0.prototype.helper_inline_css = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/inline-css', [\n\t\t'html',\n\t\t'strip_css',\n\t], params, callback);\n};\n\n/**\n * Retrieve minimal List data for all lists a member is subscribed to.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/lists-for-email.php\n */\nMailChimpAPI_v2_0.prototype.helper_lists_for_email = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/lists-for-email', [\n\t\t'email',\n\t], params, callback);\n};\n\n/**\n * \"Ping\" the MailChimp API - a simple method you can call that will return a\n * constant value as long as everything is good. Note than unlike most all of\n * our methods, we don't throw an Exception if we are having issues. You will\n * simply receive a different string back that will explain our view on what is\n * going on.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/ping.php\n */\nMailChimpAPI_v2_0.prototype.helper_ping = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/ping', [\n\t], params, callback);\n};\n\n/**\n * Search all campaigns for the specified query terms\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/search-campaigns.php\n */\nMailChimpAPI_v2_0.prototype.helper_search_campaigns = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/search-campaigns', [\n\t\t'query',\n\t\t'offset',\n\t\t'snip_start',\n\t\t'snip_end',\n\t], params, callback);\n};\n\n/**\n * Search account wide or on a specific list using the specified query terms.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/search-members.php\n */\nMailChimpAPI_v2_0.prototype.helper_search_members = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/search-members', [\n\t\t'query',\n\t\t'id',\n\t\t'offset',\n\t], params, callback);\n};\n\n/**\n * Retrieve all domain verification records for an account.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/helper/verified-domains.php\n */\nMailChimpAPI_v2_0.prototype.helper_verified_domains = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('helper/verified-domains', [\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/************************** Reports Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Get all email addresses that complained about a given campaign.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/abuse.php\n */\nMailChimpAPI_v2_0.prototype.reports_abuse = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/abuse', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Retrieve the text presented in our app for how a campaign performed and any\n * advice we may have for you - best suited for display in customized reports\n * pages. Note: some messages will contain HTML - clean tags as necessary.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/advice.php\n */\nMailChimpAPI_v2_0.prototype.reports_advice = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/advice', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Retrieve the most recent full bounce message for a specific email address on\n * the given campaign. Messages over 30 days old are subject to being removed.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/bounce-message.php\n */\nMailChimpAPI_v2_0.prototype.reports_bounce_message = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/bounce-message', [\n\t\t'cid',\n\t\t'email',\n\t], params, callback);\n};\n\n/**\n * Retrieve the full bounce messages for the given campaign. Note that this can\n * return very large amounts of data depending on how large the campaign was\n * and how much cruft the bounce provider returned. Also, messages over 30 days\n * old are subject to being removed.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/bounce-messages.php\n */\nMailChimpAPI_v2_0.prototype.reports_bounce_messages = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/bounce-messages', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Return the list of email addresses that clicked on a given url, and how many\n * times they clicked.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/click-detail.php\n */\nMailChimpAPI_v2_0.prototype.reports_click_detail = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/click-detail', [\n\t\t'cid',\n\t\t'tid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * The urls tracked and their click counts for a given campaign.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/clicks.php\n */\nMailChimpAPI_v2_0.prototype.reports_clicks = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/clicks', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Get the top 5 performing email domains for this campaign. Users wanting more\n * than 5 should use campaign campaignEmailStatsAIM() or\n * campaignEmailStatsAIMAll() and generate any additional stats they require.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/domain-performance.php\n */\nMailChimpAPI_v2_0.prototype.reports_domain_performance = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/domain-performance', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Retrieve the Ecommerce Orders tracked by campaignEcommOrderAdd()-\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/ecomm-orders.php\n */\nMailChimpAPI_v2_0.prototype.reports_ecomm_orders = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/ecomm-orders', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Retrieve the eepurl stats from the web/Twitter mentions for this campaign.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/eepurl.php\n */\nMailChimpAPI_v2_0.prototype.reports_eepurl = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/eepurl', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Retrieve the countries/regions and number of opens tracked for each. Email\n * address are not returned.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/geo-opens.php\n */\nMailChimpAPI_v2_0.prototype.reports_geo_opens = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/geo-opens', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Retrieve the Google Analytics data we've collected for this campaign. Note,\n * requires Google Analytics Add-on to be installed and configured.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/google-analytics.php\n */\nMailChimpAPI_v2_0.prototype.reports_google_analytics = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/google-analytics', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Given a campaign and email address, return the entire click and open history\n * with timestamps, ordered by time. If you need to dump the full activity for\n * a campaign and/or get incremental results, you should use the\n * campaignSubscriberActivity Export API method, not this, especially for large\n * campaigns.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/member-activity.php\n */\nMailChimpAPI_v2_0.prototype.reports_member_activity = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/member-activity', [\n\t\t'cid',\n\t\t'emails',\n\t], params, callback);\n};\n\n/**\n * Retrieve the list of email addresses that did not open a given campaign.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/not-opened.php\n */\nMailChimpAPI_v2_0.prototype.reports_not_opened = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/not-opened', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Retrieve the list of email addresses that opened a given campaign with how\n * many times they opened.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/opened.php\n */\nMailChimpAPI_v2_0.prototype.reports_opened = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/opened', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Get email addresses the campaign was sent to.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/sent-to.php\n */\nMailChimpAPI_v2_0.prototype.reports_sent_to = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/sent-to', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Get the URL to a customized VIP Report for the specified campaign and\n * optionally send an email to someone with links to it. Note subsequent calls\n * will overwrite anything already set for the same campign (eg, the password).\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/share.php\n */\nMailChimpAPI_v2_0.prototype.reports_share = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/share', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/**\n * Retrieve relevant aggregate campaign statistics (opens, bounces, clicks,\n * etc.).\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/summary.php\n */\nMailChimpAPI_v2_0.prototype.reports_summary = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/summary', [\n\t\t'cid',\n\t], params, callback);\n};\n\n/**\n * Get all unsubscribed email addresses for a given campaign.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/reports/unsubscribes.php\n */\nMailChimpAPI_v2_0.prototype.reports_unsubscribes = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('reports/unsubscribes', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/************************* Templates Related Methods *************************/\n/*****************************************************************************/\n\n/**\n * Create a new user template, NOT campaign content. These templates can then\n * be applied while creating campaigns.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/templates/add.php\n */\nMailChimpAPI_v2_0.prototype.templates_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('templates/add', [\n\t\t'name',\n\t\t'html',\n\t\t'folder_id',\n\t], params, callback);\n};\n\n/**\n * Delete (deactivate) a user template.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/templates/del.php\n */\nMailChimpAPI_v2_0.prototype.templates_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('templates/del', [\n\t\t'template_id',\n\t], params, callback);\n};\n\n/**\n * Pull details for a specific template to help support editing.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/templates/info.php\n */\nMailChimpAPI_v2_0.prototype.templates_info = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('templates/info', [\n\t\t'template_id',\n\t\t'type',\n\t], params, callback);\n};\n\n/**\n * Retrieve various templates available in the system, allowing some thing\n * similar to our template gallery to be created.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/templates/list.php\n */\nMailChimpAPI_v2_0.prototype.templates_list = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('templates/list', [\n\t\t'types',\n\t\t'filters',\n\t], params, callback);\n};\n\n/**\n * Undelete (reactivate) a user template.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/templates/undel.php\n */\nMailChimpAPI_v2_0.prototype.templates_undel = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('templates/undel', [\n\t\t'template_id',\n\t], params, callback);\n};\n\n/**\n * Replace the content of a user template, NOT campaign content.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/templates/update.php\n */\nMailChimpAPI_v2_0.prototype.templates_update = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('templates/update', [\n\t\t'template_id',\n\t\t'values',\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/*************************** Users Related Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Invite a user to your account.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/users/invite.php\n */\nMailChimpAPI_v2_0.prototype.users_invite = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('users/invite', [\n\t\t'email',\n\t\t'role',\n\t\t'msg',\n\t], params, callback);\n};\n\n/**\n * Resend an invite a user to your account. Note, if the same address has been\n * invited multiple times, this will simpy re-send the most recent invite.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/users/invite-resend.php\n */\nMailChimpAPI_v2_0.prototype.users_invite_resend = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('users/invite-resend', [\n\t\t'email',\n\t], params, callback);\n};\n\n/**\n * Revoke an invitation sent to a user to your account. Note, if the same\n * address has been invited multiple times, this will simpy revoke the most\n * recent invite.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/users/invite-revoke.php\n */\nMailChimpAPI_v2_0.prototype.users_invite_revoke = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('users/invite-revoke', [\n\t\t'email',\n\t], params, callback);\n};\n\n/**\n * Retrieve the list of pending users invitations have been sent for.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/users/invites.php\n */\nMailChimpAPI_v2_0.prototype.users_invites = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('users/invites', [\n\t], params, callback);\n};\n\n/**\n * Revoke access for a specified login.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/users/login-revoke.php\n */\nMailChimpAPI_v2_0.prototype.users_login_revoke = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('users/login_revoke', [\n\t\t'username',\n\t], params, callback);\n};\n\n/**\n * Retrieve the list of active logins.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/users/logins.php\n */\nMailChimpAPI_v2_0.prototype.users_logins = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('users/logins', [\n\t], params, callback);\n};\n\n/*****************************************************************************/\n/**************************** Vip Related Methods ****************************/\n/*****************************************************************************/\n\n/**\n * Retrieve all Activity (opens/clicks) for VIPs over the past 10 days.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/vip/activity.php\n */\nMailChimpAPI_v2_0.prototype.vip_activity = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('vip/activity', [\n\t], params, callback);\n};\n\n/**\n * Add VIPs (previously called Golden Monkeys).\n *\n * @see http://apidocs.mailchimp.com/api/2.0/vip/add.php\n */\nMailChimpAPI_v2_0.prototype.vip_add = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('vip/add', [\n\t\t'id',\n\t\t'emails',\n\t], params, callback);\n};\n\n/**\n * Remove VIPs - this does not affect list membership.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/vip/del.php\n */\nMailChimpAPI_v2_0.prototype.vip_del = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('vip/del', [\n\t\t'id',\n\t\t'emails',\n\t], params, callback);\n};\n\n/**\n * Retrieve all Golden Monkey(s) for an account.\n *\n * @see http://apidocs.mailchimp.com/api/2.0/vip/members.php\n */\nMailChimpAPI_v2_0.prototype.vip_members = function (params, callback) {\n\tif (typeof params == 'function') {\n\t\tcallback = params;\n\t\tparams = {};\n\t}\n\n\tthis.execute('vip/members', [\n\t], params, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/helpers.js":"/**\n * Recursively encode an object as application/x-www-form-urlencoded.\n *\n * @param value Value to encode\n * @param key Key to encode (not required for top-level objects)\n * @return Encoded object\n */\nvar serialize = module.exports.serialize = function (value, key) {\n\n\tvar output;\n\n\tif (!key && key !== 0)\n\t\tkey = '';\n\n    if (Array.isArray(value)) {\n        output = [];\n        value.forEach(function(val, index) {\n            if (key != '') index = key + '[' + index + ']';\n            output.push(serialize(val, index));\n        }, this);\n        return output.join('&');\n    } else if (typeof(value) == 'object') {\n        output = [];\n        for (var name in value) {\n            if (value[name] && value.hasOwnProperty(name)) {\n                output.push(serialize(value[name], key != '' ? key + '[' + name + ']' : name));\n            }\n        }\n        return output.join('&');\n    } else {\n        return key + '=' + encodeURIComponent(value);\n    }\n\n}\n\n/**\n * Creates an Error with information received from MailChimp. In addition to an\n * error message it also includes an error code. A detailed list of known error\n * messages and codes can be found at the url below for version 1.3 of the API.\n *\n * @see http://apidocs.mailchimp.com/api/1.3/exceptions.field.php\n *\n * @param message The error message\n * @param code The error code\n * @return Instance of {@link Error}\n */\nvar createMailChimpError = module.exports.createMailChimpError = function (message, code) {\n\n\tvar error = new Error(message || (message = ''));\n\n\tif (code)\n\t\terror.code = code;\n\n\treturn error;\n\n}\n\n/**\n * handleMailChimpResponse\n * Handles a response from MailChimp. This handles errors in a unified way or\n * parses the JSON response as appropriate.\n *\n * @param error\n * @param response\n * @param body\n * @param {function(error, parsedResponse)} callback\n */\nvar handleMailChimpResponse = module.exports.handleMailChimpResponse = function (error, response, body, callback) {\n  var parsedResponse;\n  if (error) {\n    return callback(new Error('Unable to connect to the MailChimp API endpoint because ' + error.message));\n  }\n\n  try {\n    parsedResponse = JSON.parse(body);\n  } catch (error) {\n    return callback(new Error('Error parsing JSON answer from MailChimp API: ' + body));\n  }\n\n  if (response.statusCode != 200 || parsedResponse.status == 'error') {\n    return callback(createMailChimpError(parsedResponse.error, parsedResponse.code));\n  }\n\n  callback(null, parsedResponse);\n}\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpAPI_v1_3.js":"var http = require('http'),\n    request = require('request'),\n    helpers = require('./helpers');\n\n/**\n * MailChimp API wrapper for the API version 1.3. This object should not be\n * instantiated directly but by using the version wrapper {@link MailChimpAPI}.\n *\n * @param apiKey The API key to access the MailChimp API with\n * @param options Configuration options\n * @return Instance of {@link MailChimpAPI_v1_3}\n */\nfunction MailChimpAPI_v1_3 (apiKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tthis.version     = '1.3';\n\tthis.apiKey      = apiKey;\n\tthis.secure      = options.secure || false;\n\tthis.packageInfo = options.packageInfo;\n\tthis.datacenter  = apiKey.split('-');\n\tthis.datacenter  = this.datacenter[1];\n\tthis.httpHost    = this.datacenter+'.api.mailchimp.com';\n\tthis.httpUri     = (this.secure) ? 'https://'+this.httpHost+':443' : 'http://'+this.httpHost+':80';\n\tthis.userAgent   = options.userAgent+' ' || '';\n\n}\n\nmodule.exports = MailChimpAPI_v1_3;\n\n/**\n * Sends a given request as a JSON object to the MailChimp API and finally\n * calls the given callback function with the resulting JSON object. This\n * method should not be called directly but will be used internally by all API\n * methods defined.\n *\n * @param method MailChimp API method to call\n * @param availableParams Parameters available for the specified API method\n * @param givenParams Parameters to call the MailChimp API with\n * @param callback Callback function to call on success\n */\nMailChimpAPI_v1_3.prototype.execute = function (method, availableParams, givenParams, callback) {\n\n\tvar finalParams = { apikey : this.apiKey };\n\tvar currentParam;\n\n\tfor (var i = 0; i < availableParams.length; i++) {\n\t\tcurrentParam = availableParams[i];\n\t\tif (typeof givenParams[currentParam] !== 'undefined')\n\t\t\tfinalParams[currentParam] = givenParams[currentParam];\n\t}\n\n\trequest({\n\t\turi : this.httpUri+'/'+this.version+'/?method='+method,\n\t\tmethod: 'POST',\n\t\theaders : { 'User-Agent' : this.userAgent+'node-mailchimp/'+this.packageInfo['version'] },\n\t\tbody : encodeURIComponent(JSON.stringify(finalParams))\n\t}, function (error, response, body) {\n\t\thelpers.handleMailChimpResponse(error, response, body, callback);\n\t});\n\n}\n\n/*****************************************************************************/\n/************************* Campaign Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Get the content (both html and text) for a campaign either as it would\n * appear in the campaign archive or as the raw, original content.\n *\n * @see http://www.mailchimp.com/api/1.3/campaigncontent.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignContent = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignContent', [\n\t\t'cid',\n\t\t'for_archive',\n\t], params, callback);\n}\n\n/**\n * Create a new draft campaign to send. You can not have more than 32,000\n * campaigns in your account.\n *\n * @see http://www.mailchimp.com/api/1.3/campaigncreate.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignCreate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignCreate', [\n\t    'type',\n\t    'options',\n\t    'content',\n\t    'segment_opts',\n\t    'type_opts',\n\t], params, callback);\n}\n\n/**\n * Delete a campaign. Seriously, \"poof, gone!\" - be careful!\n *\n * @see http://www.mailchimp.com/api/1.3/campaigndelete.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignDelete = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignDelete', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Attach Ecommerce Order Information to a Campaign. This will generall be used\n * by ecommerce package plugins that MailChimp provides or by 3rd part system\n * developers.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignecommorderadd.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignEcommOrderAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEcommOrderAdd', [\n\t    'order',\n\t], params, callback);\n}\n\n/**\n * Pause an AutoResponder or RSS campaign from sending.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignpause.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignPause = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignPause', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Replicate a campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignreplicate.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignReplicate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignReplicate', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Resume sending an AutoResponder or RSS campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignresume.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignResume = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignResume', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Schedule a campaign to be sent in the future.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignschedule.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignSchedule = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSchedule', [\n\t    'cid',\n\t    'schedule_time',\n\t    'schedule_time_b',\n\t], params, callback);\n}\n\n/**\n * Allows one to test their segmentation rules before creating a campaign using\n * them.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignsegmenttest.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignSegmentTest = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSegmentTest', [\n\t\t'list_id',\n\t\t'options',\n\t], params, callback);\n}\n\n/**\n * Send a given campaign immediately. For RSS campaigns, this will \"start\"\n * them.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignsendnow.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignSendNow = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSendNow', [\n\t\t'cid',\n\t], params, callback);\n}\n\n/**\n * Send a test of this campaign to the provided email address.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignsendtest.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignSendTest = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSendTest', [\n\t\t'cid',\n\t\t'test_emails',\n\t\t'send_type',\n\t], params, callback);\n}\n\n/**\n * Get the URL to a customized VIP Report for the specified campaign and\n * optionally send an email to someone with links to it.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignsharereport.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignShareReport = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignShareReport', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n}\n\n/**\n * Get the HTML template content sections for a campaign. Note that this will\n * return very jagged, non-standard results based on the template a campaign is\n * using. You only want to use this if you want to allow editing template\n * sections in your applicaton.\n *\n * @see http://www.mailchimp.com/api/1.3/campaigntemplatecontent.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignTemplateContent = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignTemplateContent', [\n\t\t'cid',\n\t], params, callback);\n}\n\n/**\n * Unschedule a campaign that is scheduled to be sent in the future.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignunschedule.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignUnschedule = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUnschedule', [\n\t\t'cid',\n\t], params, callback);\n}\n\n/**\n * Update just about any setting for a campaign that has not been sent. See\n * campaignCreate() for details.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignupdate.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUpdate', [\n\t\t'cid',\n\t\t'name',\n\t\t'value',\n\t], params, callback);\n}\n\n/**\n * Get the list of campaigns and their details matching the specified filters.\n *\n * @see http://www.mailchimp.com/api/1.3/campaigns.func.php\n */\nMailChimpAPI_v1_3.prototype.campaigns = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaigns', [\n\t    'filters',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************** Campaign Stats Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Get all email addresses that complained about a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignabusereports.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignAbuseReports = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignAbuseReports', [\n\t    'cid',\n\t    'since',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the text presented in the MailChimp app for how a campaign\n * performed and any advice MailChimp may have for you - best suited for\n * display in customized reports pages.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignadvice.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignAdvice = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignAdvice', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the Google Analytics data MailChimp has collected for this\n * campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignanalytics.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignAnalytics = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignAnalytics', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the most recent full bounce message for a specific email address\n * on the given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignbouncemessage.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignBounceMessage = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignBounceMessage', [\n\t    'cid',\n\t    'email',\n\t], params, callback);\n}\n\n/**\n * Retrieve the full bounce messages for the given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignbouncemessages.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignBounceMessages = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignBounceMessages', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t    'since',\n\t], params, callback);\n}\n\n/**\n * Get an array of the urls being tracked, and their click counts for a given\n * campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignclickstats.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignClickStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignClickStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the Ecommerce Orders tracked by campaignEcommOrderAdd().\n *\n * @see http://www.mailchimp.com/api/1.3/campaignecommorders.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignEcommOrders = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEcommOrders', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t    'since',\n\t], params, callback);\n}\n\n/**\n * Retrieve the tracked eepurl mentions on Twitter.\n *\n * @see http://www.mailchimp.com/api/1.3/campaigneepurlstats.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignEepUrlStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEepUrlStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Get the top 5 performing email domains for this campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignemaildomainperformance.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignEmailDomainPerformance = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailDomainPerformance', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the countries and number of opens tracked for each.\n *\n * @see http://www.mailchimp.com/api/1.3/campaigngeoopens.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignGeoOpens = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignGeoOpens', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the regions and number of opens tracked for a certain country.\n *\n * @see http://www.mailchimp.com/api/1.3/campaigngeoopensforcountry.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignGeoOpensForCountry = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignGeoOpensForCountry', [\n\t    'cid',\n\t    'code',\n\t], params, callback);\n}\n\n/**\n * @deprecated Get all email addresses with Hard Bounces for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignhardbounces.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignHardBounces = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignHardBounces', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Get all email addresses the campaign was successfully sent to (ie, no\n * bounces).\n *\n * @see http://www.mailchimp.com/api/1.3/campaignmembers.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignMembers = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignMembers', [\n\t    'cid',\n\t    'status',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * @deprecated Get all email addresses with Soft Bounces for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignsoftbounces.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignSoftBounces = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSoftBounces', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Given a list and a campaign, get all the relevant campaign statistics\n * (opens, bounces, clicks, etc.).\n *\n * @see http://www.mailchimp.com/api/1.3/campaignstats.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Get all unsubscribed email addresses for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignunsubscribes.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignUnsubscribes = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUnsubscribes', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/*********************** Campaign Report Data Methods  ***********************/\n/*****************************************************************************/\n\n/**\n * Return the list of email addresses that clicked on a given url, and how many\n * times they clicked.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignclickdetailaim.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignClickDetailAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignClickDetailAIM', [\n\t    'cid',\n\t    'url',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Given a campaign and email address, return the entire click and open history\n * with timestamps, ordered by time.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignemailstatsaim.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignEmailStatsAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailStatsAIM', [\n\t    'cid',\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Given a campaign and correct paging limits, return the entire click and open\n * history with timestamps, ordered by time, for every user a campaign was\n * delivered to.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignemailstatsaimall.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignEmailStatsAIMAll = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailStatsAIMAll', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the list of email addresses that did not open a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignnotopenedaim.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignNotOpenedAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignNotOpenedAIM', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the list of email addresses that opened a given campaign with how\n * many times they opened - note: this AIM function is free and does not\n * actually require the AIM module to be installed.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignopenedaim.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignOpenedAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignOpenedAIM', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/****************************  Ecommerce Methods *****************************/\n/*****************************************************************************/\n\n/**\n * Import Ecommerce Order Information to be used for Segmentation.\n *\n * @see http://www.mailchimp.com/api/1.3/ecommorderadd.func.php\n */\nMailChimpAPI_v1_3.prototype.ecommOrderAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('ecommOrderAdd', [\n\t    'order',\n\t], params, callback);\n}\n\n/**\n * Delete Ecommerce Order Information used for segmentation.\n *\n * @see http://www.mailchimp.com/api/1.3/ecommorderdel.func.php\n */\nMailChimpAPI_v1_3.prototype.ecommOrderDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('ecommOrderDel', [\n\t    'store_id',\n\t    'order_id',\n\t], params, callback);\n}\n\n/**\n * Retrieve the Ecommerce Orders for an account.\n *\n * @see http://www.mailchimp.com/api/1.3/ecommorders.func.php\n */\nMailChimpAPI_v1_3.prototype.ecommOrders = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('ecommOrders', [\n\t    'start',\n\t    'limit',\n\t    'since',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************** Folder Related Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Add a new folder to file campaigns or autoresponders in.\n *\n * @see http://www.mailchimp.com/api/1.3/folderadd.func.php\n */\nMailChimpAPI_v1_3.prototype.folderAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('folderAdd', [\n\t    'name',\n\t    'type',\n\t], params, callback);\n}\n\n/**\n * Delete a campaign or autoresponder folder.\n *\n * @see http://www.mailchimp.com/api/1.3/folderdel.func.php\n */\nMailChimpAPI_v1_3.prototype.folderDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('folderDel', [\n\t\t'fid',\n\t    'type',\n\t], params, callback);\n}\n\n/**\n * Update the name of a folder for campaigns or autoresponders.\n *\n * @see http://www.mailchimp.com/api/1.3/folderupdate.func.php\n */\nMailChimpAPI_v1_3.prototype.folderUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('folderUpdate', [\n\t    'fid',\n\t    'name',\n\t    'type',\n\t], params, callback);\n}\n\n/**\n * List all the folders for a user account.\n *\n * @see http://www.mailchimp.com/api/1.3/folders.func.php\n */\nMailChimpAPI_v1_3.prototype.folders = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('folders', [\n\t    'type',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/****************************** Helper Methods *******************************/\n/*****************************************************************************/\n\n/**\n * Retrieve all Campaigns Ids a member was sent.\n *\n * @see http://www.mailchimp.com/api/1.3/campaignsforemail.func.php\n */\nMailChimpAPI_v1_3.prototype.campaignsForEmail = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignsForEmail', [\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Return the current Chimp Chatter messages for an account.\n *\n * @see http://www.mailchimp.com/api/1.3/chimpchatter.func.php\n */\nMailChimpAPI_v1_3.prototype.chimpChatter = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('chimpChatter', [\n\t], params, callback);\n}\n\n/**\n * Have HTML content auto-converted to a text-only format.\n *\n * @see http://www.mailchimp.com/api/1.3/generatetext.func.php\n */\nMailChimpAPI_v1_3.prototype.generateText = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('generateText', [\n\t    'type',\n\t    'content',\n\t], params, callback);\n}\n\n/**\n * Retrieve lots of account information including payments made, plan info,\n * some account stats, installed modules, contact info, and more.\n *\n * @see http://www.mailchimp.com/api/1.3/getaccountdetails.func.php\n */\nMailChimpAPI_v1_3.prototype.getAccountDetails = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('getAccountDetails', [\n\t], params, callback);\n}\n\n/**\n * Send your HTML content to have the CSS inlined and optionally remove the\n * original styles.\n *\n * @see http://www.mailchimp.com/api/1.3/inlinecss.func.php\n */\nMailChimpAPI_v1_3.prototype.inlineCss = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('inlineCss', [\n\t    'html',\n\t    'strip_css',\n\t], params, callback);\n}\n\n/**\n * Retrieve all List Ids a member is subscribed to.\n *\n * @see http://www.mailchimp.com/api/1.3/listsforemail.func.php\n */\nMailChimpAPI_v1_3.prototype.listsForEmail = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listsForEmail', [\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * \"Ping\" the MailChimp API - a simple method you can call that will return a\n * constant value as long as everything is good.\n *\n * @see http://www.mailchimp.com/api/1.3/ping.func.php\n */\nMailChimpAPI_v1_3.prototype.ping = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('ping', [\n\t], params, callback);\n}\n\n/**\n * Search all campaigns for the specified query terms.\n *\n * @see http://apidocs.mailchimp.com/api/1.3/searchcampaigns.func.php\n */\nMailChimpAPI_v1_3.prototype.searchCampaigns = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('searchCampaigns', [\n\t\t\t'query',\n\t\t\t'offset',\n\t\t\t'snip_start',\n\t\t\t'snip_end',\n\t], params, callback);\n}\n\n/**\n * Search account wide or on a specific list using the specified query terms.\n *\n * @see http://apidocs.mailchimp.com/api/1.3/searchmembers.func.php\n */\nMailChimpAPI_v1_3.prototype.searchMembers = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('searchMembers', [\n\t\t\t'query',\n\t\t\t'id',\n\t\t\t'offset',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/*************************** List Related Methods ****************************/\n/*****************************************************************************/\n\n/**\n * Get all email addresses that complained about a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.3/listabusereports.func.php\n */\nMailChimpAPI_v1_3.prototype.listAbuseReports = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listAbuseReports', [\n\t    'id',\n\t    'start',\n\t    'limit',\n\t    'since',\n\t], params, callback);\n}\n\n/**\n * Access up to the previous 180 days of daily detailed aggregated activity\n * stats for a given list.\n *\n * @see http://www.mailchimp.com/api/1.3/listactivity.func.php\n */\nMailChimpAPI_v1_3.prototype.listActivity = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listActivity', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Subscribe a batch of email addresses to a list at once.\n *\n * @see http://www.mailchimp.com/api/1.3/listbatchsubscribe.func.php\n */\nMailChimpAPI_v1_3.prototype.listBatchSubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listBatchSubscribe', [\n\t    'id',\n\t    'batch',\n\t    'double_optin',\n\t    'update_existing',\n\t    'replace_interests',\n\t], params, callback);\n}\n\n/**\n * Unsubscribe a batch of email addresses to a list.\n *\n * @see http://www.mailchimp.com/api/1.3/listbatchunsubscribe.func.php\n */\nMailChimpAPI_v1_3.prototype.listBatchUnsubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listBatchUnsubscribe', [\n\t    'id',\n\t    'emails',\n\t    'delete_member',\n\t    'send_goodbye',\n\t    'send_notify',\n\t], params, callback);\n}\n\n/**\n * Retrieve the clients that the list's subscribers have been tagged as being\n * used based on user agents seen.\n *\n * @see http://www.mailchimp.com/api/1.3/listclients.func.php\n */\nMailChimpAPI_v1_3.prototype.listClients = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listClients', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Access the Growth History by Month for a given list.\n *\n * @see http://www.mailchimp.com/api/1.3/listgrowthhistory.func.php\n */\nMailChimpAPI_v1_3.prototype.listGrowthHistory = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listGrowthHistory', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Add a single Interest Group - if interest groups for the List are not yet\n * enabled, adding the first group will automatically turn them on.\n *\n * @see http://www.mailchimp.com/api/1.3/listinterestgroupadd.func.php\n */\nMailChimpAPI_v1_3.prototype.listInterestGroupAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupAdd', [\n\t    'id',\n\t    'group_name',\n\t    'grouping_id',\n\t    'optional',\n\t], params, callback);\n}\n\n/**\n * Delete a single Interest Group - if the last group for a list is deleted,\n * this will also turn groups for the list off.\n *\n * @see http://www.mailchimp.com/api/1.3/listinterestgroupdel.func.php\n */\nMailChimpAPI_v1_3.prototype.listInterestGroupDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupDel', [\n\t    'id',\n\t    'group_name',\n\t    'grouping_id',\n\t], params, callback);\n}\n\n/**\n * Change the name of an Interest Group.\n *\n * @see http://www.mailchimp.com/api/1.3/listinterestgroupupdate.func.php\n */\nMailChimpAPI_v1_3.prototype.listInterestGroupUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupUpdate', [\n\t    'id',\n\t    'old_name',\n\t    'new_name',\n\t    'grouping_id',\n\t    'optional',\n\t], params, callback);\n}\n\n/**\n * Add a new Interest Grouping - if interest groups for the List are not yet\n * enabled, adding the first grouping will automatically turn them on.\n *\n * @see http://www.mailchimp.com/api/1.3/listinterestgroupingadd.func.php\n */\nMailChimpAPI_v1_3.prototype.listInterestGroupingAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupingAdd', [\n\t    'id',\n\t    'name',\n\t    'type',\n\t    'groups',\n\t], params, callback);\n}\n\n/**\n * Delete an existing Interest Grouping - this will permanently delete all\n * contained interest groups and will remove those selections from all list\n * members.\n *\n * @see http://www.mailchimp.com/api/1.3/listinterestgroupingdel.func.php\n */\nMailChimpAPI_v1_3.prototype.listInterestGroupingDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupingDel', [\n\t    'grouping_id',\n\t], params, callback);\n}\n\n/**\n * Update an existing Interest Grouping.\n *\n * @see http://www.mailchimp.com/api/1.3/listinterestgroupingupdate.func.php\n */\nMailChimpAPI_v1_3.prototype.listInterestGroupingUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupingUpdate', [\n\t\t'grouping_id',\n\t    'name',\n\t    'value',\n\t], params, callback);\n}\n\n/**\n * Get the list of interest groupings for a given list, including the label,\n * form information, and included groups for each.\n *\n * @see http://www.mailchimp.com/api/1.3/listinterestgroupings.func.php\n */\nMailChimpAPI_v1_3.prototype.listInterestGroupings = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupings', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Retrieve the locations (countries) that the list's subscribers have been\n * tagged to based on geocoding their IP address.\n *\n * @see http://www.mailchimp.com/api/1.3/listlocations.func.php\n */\nMailChimpAPI_v1_3.prototype.listLocations = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listLocations', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Get the most recent 100 activities for particular list members (open, click,\n * bounce, unsub, abuse, sent to).\n *\n * @see http://www.mailchimp.com/api/1.3/listmemberactivity.func.php\n */\nMailChimpAPI_v1_3.prototype.listMemberActivity = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMemberActivity', [\n\t    'id',\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Get all the information for particular members of a list.\n *\n * @see http://www.mailchimp.com/api/1.3/listmemberinfo.func.php\n */\nMailChimpAPI_v1_3.prototype.listMemberInfo = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMemberInfo', [\n\t    'id',\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Get all of the list members for a list that are of a particular status.\n *\n * @see http://www.mailchimp.com/api/1.3/listmembers.func.php\n */\nMailChimpAPI_v1_3.prototype.listMembers = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMembers', [\n\t    'id',\n\t    'status',\n\t    'since',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Add a new merge tag to a given list.\n *\n * @see http://www.mailchimp.com/api/1.3/listmergevaradd.func.php\n */\nMailChimpAPI_v1_3.prototype.listMergeVarAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarAdd', [\n\t    'id',\n\t    'tag',\n\t    'name',\n\t    'options',\n\t], params, callback);\n}\n\n/**\n * Delete a merge tag from a given list and all its members.\n *\n * @see http://www.mailchimp.com/api/1.3/listmergevardel.func.php\n */\nMailChimpAPI_v1_3.prototype.listMergeVarDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarDel', [\n\t    'id',\n\t    'tag',\n\t], params, callback);\n}\n\n/**\n * Update most parameters for a merge tag on a given list.\n *\n * @see http://www.mailchimp.com/api/1.3/listmergevarupdate.func.php\n */\nMailChimpAPI_v1_3.prototype.listMergeVarUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarUpdate', [\n\t    'id',\n\t    'tag',\n\t    'options',\n\t], params, callback);\n}\n\n/**\n * Get the list of merge tags for a given list, including their name, tag, and\n * required setting.\n *\n * @see http://www.mailchimp.com/api/1.3/listmergevars.func.php\n */\nMailChimpAPI_v1_3.prototype.listMergeVars = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVars', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Save a segment against a list for later use.\n *\n * @see http://www.mailchimp.com/api/1.3/liststaticsegmentadd.func.php\n */\nMailChimpAPI_v1_3.prototype.listStaticSegmentAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegmentAdd', [\n\t    'id',\n\t    'name',\n\t], params, callback);\n}\n\n/**\n * Delete a static segment.\n *\n * @see http://www.mailchimp.com/api/1.3/liststaticsegmentdel.func.php\n */\nMailChimpAPI_v1_3.prototype.listStaticSegmentDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegmentDel', [\n\t    'id',\n\t    'seg_id',\n\t], params, callback);\n}\n\n/**\n * Add list members to a static segment.\n *\n * @see http://www.mailchimp.com/api/1.3/liststaticsegmentmembersadd.func.php\n */\nMailChimpAPI_v1_3.prototype.listStaticSegmentMembersAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegmentMembersAdd', [\n\t    'id',\n\t    'seg_id',\n\t    'batch',\n\t], params, callback);\n}\n\n/**\n * Remove list members from a static segment.\n *\n * @see http://www.mailchimp.com/api/1.3/liststaticsegmentmembersdel.func.php\n */\nMailChimpAPI_v1_3.prototype.listStaticSegmentMembersDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegmentMembersDel', [\n\t    'id',\n\t    'seg_id',\n\t    'batch',\n\t], params, callback);\n}\n\n/**\n * Resets a static segment - removes all members from the static segment.\n *\n * @see http://www.mailchimp.com/api/1.3/liststaticsegmentreset.func.php\n */\nMailChimpAPI_v1_3.prototype.listStaticSegmentReset = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegmentReset', [\n\t    'id',\n\t    'seg_id',\n\t], params, callback);\n}\n\n/**\n * Retrieve all of the Static Segments for a list.\n *\n * @see http://www.mailchimp.com/api/1.3/liststaticsegments.func.php\n */\nMailChimpAPI_v1_3.prototype.listStaticSegments = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegments', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Subscribe the provided email to a list.\n *\n * @see http://www.mailchimp.com/api/1.3/listsubscribe.func.php\n */\nMailChimpAPI_v1_3.prototype.listSubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listSubscribe', [\n\t    'id',\n\t    'email_address',\n\t    'merge_vars',\n\t    'email_type',\n\t    'double_optin',\n\t    'update_existing',\n\t    'replace_interests',\n\t    'send_welcome',\n\t], params, callback);\n}\n\n/**\n * Unsubscribe the given email address from the list.\n *\n * @see http://www.mailchimp.com/api/1.3/listunsubscribe.func.php\n */\nMailChimpAPI_v1_3.prototype.listUnsubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listUnsubscribe', [\n\t    'id',\n\t    'email_address',\n\t    'delete_member',\n\t    'send_goodbye',\n\t    'send_notify',\n\t], params, callback);\n}\n\n/**\n * Edit the email address, merge fields, and interest groups for a list member.\n *\n * @see http://www.mailchimp.com/api/1.3/listupdatemember.func.php\n */\nMailChimpAPI_v1_3.prototype.listUpdateMember = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listUpdateMember', [\n\t    'id',\n\t    'email_address',\n\t    'merge_vars',\n\t    'email_type',\n\t    'replace_interests',\n\t], params, callback);\n}\n\n/**\n * Add a new Webhook URL for the given list.\n *\n * @see http://www.mailchimp.com/api/1.3/listwebhookadd.func.php\n */\nMailChimpAPI_v1_3.prototype.listWebhookAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listWebhookAdd', [\n\t    'id',\n\t    'url',\n\t    'actions',\n\t    'sources',\n\t], params, callback);\n}\n\n/**\n * Delete an existing Webhook URL from a given list.\n *\n * @see http://www.mailchimp.com/api/1.3/listwebhookdel.func.php\n */\nMailChimpAPI_v1_3.prototype.listWebhookDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listWebhookDel', [\n\t    'id',\n\t    'url',\n\t], params, callback);\n}\n\n/**\n * Return the Webhooks configured for the given list.\n *\n * @see http://www.mailchimp.com/api/1.3/listwebhooks.func.php\n */\nMailChimpAPI_v1_3.prototype.listWebhooks = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listWebhooks', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Retrieve all of the lists defined for your user account.\n *\n * @see http://www.mailchimp.com/api/1.3/lists.func.php\n */\nMailChimpAPI_v1_3.prototype.lists = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('lists', [\n\t    'filters',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************* Security Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Add an API Key to your account.\n *\n * @see http://www.mailchimp.com/api/1.3/apikeyadd.func.php\n */\nMailChimpAPI_v1_3.prototype.apikeyAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeyAdd', [\n\t    'username',\n\t    'password',\n\t], params, callback);\n}\n\n/**\n * Expire a Specific API Key.\n *\n * @see http://www.mailchimp.com/api/1.3/apikeyexpire.func.php\n */\nMailChimpAPI_v1_3.prototype.apikeyExpire = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeyExpire', [\n\t    'username',\n\t    'password',\n\t], params, callback);\n}\n\n/**\n * Retrieve a list of all MailChimp API Keys for this User.\n *\n * @see http://www.mailchimp.com/api/1.3/apikeys.func.php\n */\nMailChimpAPI_v1_3.prototype.apikeys = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeys', [\n\t    'username',\n\t    'password',\n\t    'expired',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************* Template Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Create a new user template, NOT campaign content.\n *\n * @see http://www.mailchimp.com/api/1.3/templateadd.func.php\n */\nMailChimpAPI_v1_3.prototype.templateAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templateAdd', [\n\t    'name',\n\t    'html',\n\t], params, callback);\n}\n\n/**\n * Delete (deactivate) a user template.\n *\n * @see http://www.mailchimp.com/api/1.3/templatedel.func.php\n */\nMailChimpAPI_v1_3.prototype.templateDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templateDel', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Pull details for a specific template to help support editing.\n *\n * @see http://www.mailchimp.com/api/1.3/templateinfo.func.php\n */\nMailChimpAPI_v1_3.prototype.templateInfo = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templateInfo', [\n\t\t'tid',\n\t\t'type',\n\t], params, callback);\n}\n\n/**\n * Undelete (reactivate) a user template.\n *\n * @see http://www.mailchimp.com/api/1.3/templateundel.func.php\n */\nMailChimpAPI_v1_3.prototype.templateUndel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templateUndel', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Replace the content of a user template, NOT campaign content.\n *\n * @see http://www.mailchimp.com/api/1.3/templateupdate.func.php\n */\nMailChimpAPI_v1_3.prototype.templateUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templateUpdate', [\n\t    'id',\n\t    'values',\n\t], params, callback);\n}\n\n/**\n * Retrieve various templates available in the system, allowing some thing\n * similar to our template gallery to be created.\n *\n * @see http://www.mailchimp.com/api/1.3/templates.func.php\n */\nMailChimpAPI_v1_3.prototype.templates = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates', [\n\t    'types',\n\t    'inactives',\n\t    'category',\n\t], params, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpAPI_v1_2.js":"var http = require('http'),\n    request = require('request'),\n    helpers = require('./helpers');\n\n/**\n * MailChimp API wrapper for the API version 1.2. This object should not be\n * instantiated directly but by using the version wrapper {@link MailChimpAPI}.\n *\n * @param apiKey The API key to access the MailChimp API with\n * @param options Configuration options\n * @return Instance of {@link MailChimpAPI_v1_2}\n */\nfunction MailChimpAPI_v1_2 (apiKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tthis.version     = '1.2';\n\tthis.apiKey      = apiKey;\n\tthis.secure      = options.secure || false;\n\tthis.packageInfo = options.packageInfo;\n\tthis.datacenter  = apiKey.split('-');\n\tthis.datacenter  = this.datacenter[1];\n\tthis.httpHost    = this.datacenter+'.api.mailchimp.com';\n\tthis.httpUri     = (this.secure) ? 'https://'+this.httpHost+':443' : 'http://'+this.httpHost+':80';\n\tthis.userAgent   = options.userAgent+' ' || '';\n\n}\n\nmodule.exports = MailChimpAPI_v1_2;\n\n/**\n * Sends a given request as a JSON object to the MailChimp API and finally\n * calls the given callback function with the resulting JSON object. This\n * method should not be called directly but will be used internally by all API\n * methods defined.\n *\n * @param method MailChimp API method to call\n * @param availableParams Parameters available for the specified API method\n * @param givenParams Parameters to call the MailChimp API with\n * @param callback Callback function to call on success\n */\nMailChimpAPI_v1_2.prototype.execute = function (method, availableParams, givenParams, callback) {\n\n\tvar finalParams = { apikey : this.apiKey };\n\tvar currentParam;\n\n\tfor (var i = 0; i < availableParams.length; i++) {\n\t\tcurrentParam = availableParams[i];\n\t\tif (typeof givenParams[currentParam] !== 'undefined')\n\t\t\tfinalParams[currentParam] = givenParams[currentParam];\n\t}\n\n\trequest({\n\t\turi : this.httpUri+'/'+this.version+'/?output=json&method='+method,\n\t\tmethod: 'POST',\n\t\theaders : { 'User-Agent' : this.userAgent+'node-mailchimp/'+this.packageInfo['version'] },\n\t\tbody : encodeURIComponent(JSON.stringify(finalParams))\n\t}, function (error, response, body) {\n\t\thelpers.handleMailChimpResponse(error, response, body, callback);\n\t});\n\n}\n\n/*****************************************************************************/\n/************************* Campaign Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Get the content (both html and text) for a campaign either as it would\n * appear in the campaign archive or as the raw, original content.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigncontent.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignContent = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignContent', [\n\t\t'cid',\n\t\t'for_archive',\n\t], params, callback);\n}\n\n/**\n * Create a new draft campaign to send.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigncreate.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignCreate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignCreate', [\n\t    'type',\n\t    'options',\n\t    'content',\n\t    'segment_opts',\n\t    'type_opts',\n\t], params, callback);\n}\n\n/**\n * Delete a campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigndelete.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignDelete = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignDelete', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Attach Ecommerce Order Information to a Campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignecommaddorder.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignEcommAddOrder = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEcommAddOrder', [\n\t    'order',\n\t], params, callback);\n}\n\n/**\n * List all the folders for a user account.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignfolders.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignFolders = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignFolders', [\n\t], params, callback);\n}\n\n/**\n * Pause an AutoResponder or RSS campaign from sending.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignpause.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignPause = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignPause', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Replicate a campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignreplicate.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignReplicate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignReplicate', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Resume sending an AutoResponder or RSS campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignresume.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignResume = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignResume', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Schedule a campaign to be sent in the future.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignschedule.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignSchedule = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSchedule', [\n\t    'cid',\n\t    'schedule_time',\n\t    'schedule_time_b',\n\t], params, callback);\n}\n\n/**\n * Allows one to test their segmentation rules before creating a campaign using\n * them.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignsegmenttest.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignSegmentTest = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSegmentTest', [\n\t\t'list_id',\n\t\t'options',\n\t], params, callback);\n}\n\n/**\n * Send a given campaign immediately.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignsendnow.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignSendNow = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSendNow', [\n\t\t'cid',\n\t], params, callback);\n}\n\n/**\n * Send a test of this campaign to the provided email address.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignsendtest.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignSendTest = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSendTest', [\n\t\t'cid',\n\t\t'test_emails',\n\t\t'send_type',\n\t], params, callback);\n}\n\n/**\n * Get the URL to a customized VIP Report for the specified campaign and\n * optionally send an email to someone with links to it.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignsharereport.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignShareReport = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignShareReport', [\n\t\t'cid',\n\t\t'opts',\n\t], params, callback);\n}\n\n/**\n * Retrieve all templates defined for your user account.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigntemplates.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignTemplates = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignTemplates', [\n\t], params, callback);\n}\n\n/**\n * Unschedule a campaign that is scheduled to be sent in the future.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignunschedule.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignUnschedule = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUnschedule', [\n\t\t'cid',\n\t], params, callback);\n}\n\n/**\n * Update just about any setting for a campaign that has not been sent.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignupdate.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUpdate', [\n\t\t'cid',\n\t\t'name',\n\t\t'value',\n\t], params, callback);\n}\n\n/**\n * Get the list of campaigns and their details matching the specified filters.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigns.func.php\n */\nMailChimpAPI_v1_2.prototype.campaigns = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaigns', [\n\t    'filters',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************** Campaign Stats Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Get all email addresses that complained about a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignabusereports.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignAbuseReports = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignAbuseReports', [\n\t    'cid',\n\t    'since',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the text presented in the MailChimp app for how a campaign\n * performed and any advice MailChimp may have for you - best suited for\n * display in customized reports pages.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignadvice.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignAdvice = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignAdvice', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the Google Analytics data MailChimp has collected for this\n * campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignanalytics.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignAnalytics = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignAnalytics', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the full bounce messages for the given campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignbouncemessages.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignBounceMessages = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignBounceMessages', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t    'since',\n\t], params, callback);\n}\n\n/**\n * Get an array of the urls being tracked, and their click counts for a given\n * campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignclickstats.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignClickStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignClickStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the Ecommerce Orders tracked by campaignEcommAddOrder().\n *\n * @see http://www.mailchimp.com/api/1.2/campaignecommorders.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignEcommOrders = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEcommOrders', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t    'since',\n\t], params, callback);\n}\n\n/**\n * Retrieve the tracked eepurl mentions on Twitter.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigneepurlstats.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignEepUrlStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEepUrlStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Get the top 5 performing email domains for this campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignemaildomainperformance.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignEmailDomainPerformance = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailDomainPerformance', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the countries and number of opens tracked for each.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigngeoopens.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignGeoOpens = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignGeoOpens', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Retrieve the regions and number of opens tracked for a certain country.\n *\n * @see http://www.mailchimp.com/api/1.2/campaigngeoopensforcountry.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignGeoOpensForCountry = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignGeoOpensForCountry', [\n\t    'cid',\n\t    'code',\n\t], params, callback);\n}\n\n/**\n * Get all email addresses with Hard Bounces for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignhardbounces.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignHardBounces = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignHardBounces', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Get all email addresses with Soft Bounces for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignsoftbounces.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignSoftBounces = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSoftBounces', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Given a list and a campaign, get all the relevant campaign statistics\n * (opens, bounces, clicks, etc.).\n *\n * @see http://www.mailchimp.com/api/1.2/campaignstats.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Get all unsubscribed email addresses for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignunsubscribes.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignUnsubscribes = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUnsubscribes', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/*************************** Campaign AIM Methods  ***************************/\n/*****************************************************************************/\n\n/**\n * Return the list of email addresses that clicked on a given url, and how many\n * times they clicked.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignclickdetailaim.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignClickDetailAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignClickDetailAIM', [\n\t    'cid',\n\t    'url',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Given a campaign and email address, return the entire click and open history\n * with timestamps, ordered by time.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignemailstatsaim.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignEmailStatsAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailStatsAIM', [\n\t    'cid',\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Given a campaign and correct paging limits, return the entire click and open\n * history with timestamps, ordered by time, for every user a campaign was\n * delivered to.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignemailstatsaimall.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignEmailStatsAIMAll = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailStatsAIMAll', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the list of email addresses that did not open a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignnotopenedaim.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignNotOpenedAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignNotOpenedAIM', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the list of email addresses that opened a given campaign with how\n * many times they opened - note: this AIM function is free and does not\n * actually require the AIM module to be installed.\n *\n * @see http://www.mailchimp.com/api/1.2/campaignopenedaim.func.php\n */\nMailChimpAPI_v1_2.prototype.campaignOpenedAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignOpenedAIM', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/****************************** Helper Methods *******************************/\n/*****************************************************************************/\n\n/**\n * Return the current Chimp Chatter messages for an account.\n *\n * @see http://www.mailchimp.com/api/1.2/chimpchatter.func.php\n */\nMailChimpAPI_v1_2.prototype.chimpChatter = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('chimpChatter', [\n\t], params, callback);\n}\n\n/**\n * Create a new folder to file campaigns in.\n *\n * @see http://www.mailchimp.com/api/1.2/createfolder.func.php\n */\nMailChimpAPI_v1_2.prototype.createFolder = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('createFolder', [\n\t\t'name',\n\t], params, callback);\n}\n\n/**\n * Import Ecommerce Order Information to be used for Segmentation.\n *\n * @see http://www.mailchimp.com/api/1.2/ecommaddorder.func.php\n */\nMailChimpAPI_v1_2.prototype.ecommAddOrder = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('createFolder', [\n\t\t'order',\n\t], params, callback);\n}\n\n/**\n * Have HTML content auto-converted to a text-only format.\n *\n * @see http://www.mailchimp.com/api/1.2/generatetext.func.php\n */\nMailChimpAPI_v1_2.prototype.generateText = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('generateText', [\n\t    'type',\n\t    'content',\n\t], params, callback);\n}\n\n/**\n * Retrieve lots of account information including payments made, plan info,\n * some account stats, installed modules, contact info, and more.\n *\n * @see http://www.mailchimp.com/api/1.2/getaccountdetails.func.php\n */\nMailChimpAPI_v1_2.prototype.getAccountDetails = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('getAccountDetails', [\n\t], params, callback);\n}\n\n/**\n * @deprecated Retrieve your User Unique Id and your Affiliate link to display/\n * use for Monkey Rewards.\n *\n * @see http://www.mailchimp.com/api/1.2/getaffiliateinfo.func.php\n */\nMailChimpAPI_v1_2.prototype.getAffiliateInfo = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('getAffiliateInfo', [\n\t], params, callback);\n}\n\n/**\n * Send your HTML content to have the CSS inlined and optionally remove the\n * original styles.\n *\n * @see http://www.mailchimp.com/api/1.2/inlinecss.func.php\n */\nMailChimpAPI_v1_2.prototype.inlineCss = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('inlineCss', [\n\t    'html',\n\t    'strip_css',\n\t], params, callback);\n}\n\n/**\n * Retrieve all List Ids a member is subscribed to.\n *\n * @see http://www.mailchimp.com/api/1.2/listsforemail.func.php\n */\nMailChimpAPI_v1_2.prototype.listsForEmail = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listsForEmail', [\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * \"Ping\" the MailChimp API - a simple method you can call that will return a\n * constant value as long as everything is good.\n *\n * @see http://www.mailchimp.com/api/1.2/ping.func.php\n */\nMailChimpAPI_v1_2.prototype.ping = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('ping', [\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/*************************** List Related Methods ****************************/\n/*****************************************************************************/\n\n/**\n * Get all email addresses that complained about a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.2/listabusereports.func.php\n */\nMailChimpAPI_v1_2.prototype.listAbuseReports = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listAbuseReports', [\n\t    'id',\n\t    'start',\n\t    'limit',\n\t    'since',\n\t], params, callback);\n}\n\n/**\n * Save a segment against a list for later use.\n *\n * @see http://www.mailchimp.com/api/1.2/listaddstaticsegment.func.php\n */\nMailChimpAPI_v1_2.prototype.listAddStaticSegment = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listAddStaticSegment', [\n\t    'id',\n\t    'name',\n\t], params, callback);\n}\n\n/**\n * Subscribe a batch of email addresses to a list at once.\n *\n * @see http://www.mailchimp.com/api/1.2/listbatchsubscribe.func.php\n */\nMailChimpAPI_v1_2.prototype.listBatchSubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listBatchSubscribe', [\n\t    'id',\n\t    'batch',\n\t    'double_optin',\n\t    'update_existing',\n\t    'replace_interests',\n\t], params, callback);\n}\n\n/**\n * Unsubscribe a batch of email addresses to a list.\n *\n * @see http://www.mailchimp.com/api/1.2/listbatchunsubscribe.func.php\n */\nMailChimpAPI_v1_2.prototype.listBatchUnsubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listBatchUnsubscribe', [\n\t    'id',\n\t    'emails',\n\t    'delete_member',\n\t    'send_goodbye',\n\t    'send_notify',\n\t], params, callback);\n}\n\n/**\n * Delete a static segment.\n *\n * @see http://www.mailchimp.com/api/1.2/listdelstaticsegment.func.php\n */\nMailChimpAPI_v1_2.prototype.listDelStaticSegment = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listDelStaticSegment', [\n\t    'id',\n\t    'seg_id',\n\t], params, callback);\n}\n\n/**\n * Access the Growth History by Month for a given list.\n *\n * @see http://www.mailchimp.com/api/1.2/listgrowthhistory.func.php\n */\nMailChimpAPI_v1_2.prototype.listGrowthHistory = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listGrowthHistory', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Add a single Interest Group - if interest groups for the List are not yet\n * enabled, adding the first group will automatically turn them on.\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroupadd.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroupAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupAdd', [\n\t    'id',\n\t    'group_name',\n\t    'grouping_id',\n\t], params, callback);\n}\n\n/**\n * Delete a single Interest Group - if the last group for a list is deleted,\n * this will also turn groups for the list off.\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroupdel.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroupDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupDel', [\n\t    'id',\n\t    'group_name',\n\t    'grouping_id',\n\t    'optional',\n\t], params, callback);\n}\n\n/**\n * Change the name of an Interest Group.\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroupupdate.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroupUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupUpdate', [\n\t    'id',\n\t    'old_name',\n\t    'new_name',\n\t    'grouping_id',\n\t    'optional',\n\t], params, callback);\n}\n\n/**\n * Add a new Interest Grouping - if interest groups for the List are not yet\n * enabled, adding the first grouping will automatically turn them on.\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroupingadd.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroupingAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupingAdd', [\n\t    'id',\n\t    'name',\n\t    'type',\n\t    'groups',\n\t], params, callback);\n}\n\n/**\n * Delete an existing Interest Grouping - this will permanently delete all\n * contained interest groups and will remove those selections from all list\n * members.\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroupingdel.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroupingDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupingDel', [\n\t    'grouping_id',\n\t], params, callback);\n}\n\n/**\n * Update an existing Interest Grouping.\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroupingupdate.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroupingUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupingUpdate', [\n\t\t'grouping_id',\n\t    'name',\n\t    'value',\n\t], params, callback);\n}\n\n/**\n * Get the list of interest groupings for a given list, including the label,\n * form information, and included groups for each.\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroupings.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroupings = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupings', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * @deprecated Get the list of interest groups for a given list, including the\n * label and form information\n *\n * @see http://www.mailchimp.com/api/1.2/listinterestgroups.func.php\n */\nMailChimpAPI_v1_2.prototype.listInterestGroups = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroups', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Get all the information for particular members of a list.\n *\n * @see http://www.mailchimp.com/api/1.2/listmemberinfo.func.php\n */\nMailChimpAPI_v1_2.prototype.listMemberInfo = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMemberInfo', [\n\t    'id',\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Get all of the list members for a list that are of a particular status.\n *\n * @see http://www.mailchimp.com/api/1.2/listmembers.func.php\n */\nMailChimpAPI_v1_2.prototype.listMembers = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMembers', [\n\t    'id',\n\t    'status',\n\t    'since',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Add a new merge tag to a given list.\n *\n * @see http://www.mailchimp.com/api/1.2/listmergevaradd.func.php\n */\nMailChimpAPI_v1_2.prototype.listMergeVarAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarAdd', [\n\t    'id',\n\t    'tag',\n\t    'name',\n\t    'req',\n\t], params, callback);\n}\n\n/**\n * Delete a merge tag from a given list and all its members.\n *\n * @see http://www.mailchimp.com/api/1.2/listmergevardel.func.php\n */\nMailChimpAPI_v1_2.prototype.listMergeVarDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarDel', [\n\t    'id',\n\t    'tag',\n\t], params, callback);\n}\n\n/**\n * Update most parameters for a merge tag on a given list.\n *\n * @see http://www.mailchimp.com/api/1.2/listmergevarupdate.func.php\n */\nMailChimpAPI_v1_2.prototype.listMergeVarUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarUpdate', [\n\t    'id',\n\t    'tag',\n\t    'options',\n\t], params, callback);\n}\n\n/**\n * Get the list of merge tags for a given list, including their name, tag, and\n * required setting.\n *\n * @see http://www.mailchimp.com/api/1.2/listmergevars.func.php\n */\nMailChimpAPI_v1_2.prototype.listMergeVars = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVars', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Resets a static segment - removes all members from the static segment.\n *\n * @see http://www.mailchimp.com/api/1.2/listresetstaticsegment.func.php\n */\nMailChimpAPI_v1_2.prototype.listResetStaticSegment = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listResetStaticSegment', [\n\t    'id',\n\t    'seg_id',\n\t], params, callback);\n}\n\n/**\n * Add list members to a static segment.\n *\n * @see http://www.mailchimp.com/api/1.2/liststaticsegmentaddmembers.func.php\n */\nMailChimpAPI_v1_2.prototype.listStaticSegmentAddMembers = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegmentAddMembers', [\n\t    'id',\n\t    'seg_id',\n\t    'batch',\n\t], params, callback);\n}\n\n/**\n * Remove list members from a static segment.\n *\n * @see http://www.mailchimp.com/api/1.2/liststaticsegmentdelmembers.func.php\n */\nMailChimpAPI_v1_2.prototype.listStaticSegmentDelMembers = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegmentDelMembers', [\n\t    'id',\n\t    'seg_id',\n\t    'batch',\n\t], params, callback);\n}\n\n/**\n * Retrieve all of the Static Segments for a list.\n *\n * @see http://www.mailchimp.com/api/1.2/liststaticsegments.func.php\n */\nMailChimpAPI_v1_2.prototype.listStaticSegments = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listStaticSegments', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Subscribe the provided email to a list.\n *\n * @see http://www.mailchimp.com/api/1.2/listsubscribe.func.php\n */\nMailChimpAPI_v1_2.prototype.listSubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listSubscribe', [\n\t    'id',\n\t    'email_address',\n\t    'merge_vars',\n\t    'email_type',\n\t    'double_optin',\n\t    'update_existing',\n\t    'replace_interests',\n\t    'send_welcome',\n\t], params, callback);\n}\n\n/**\n * Unsubscribe the given email address from the list.\n *\n * @see http://www.mailchimp.com/api/1.2/listunsubscribe.func.php\n */\nMailChimpAPI_v1_2.prototype.listUnsubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listUnsubscribe', [\n\t    'id',\n\t    'email_address',\n\t    'delete_member',\n\t    'send_goodbye',\n\t    'send_notify',\n\t], params, callback);\n}\n\n/**\n * Edit the email address, merge fields, and interest groups for a list member.\n *\n * @see http://www.mailchimp.com/api/1.2/listupdatemember.func.php\n */\nMailChimpAPI_v1_2.prototype.listUpdateMember = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listUpdateMember', [\n\t    'id',\n\t    'email_address',\n\t    'merge_vars',\n\t    'email_type',\n\t    'replace_interests',\n\t], params, callback);\n}\n\n/**\n * Add a new Webhook URL for the given list.\n *\n * @see http://www.mailchimp.com/api/1.2/listwebhookadd.func.php\n */\nMailChimpAPI_v1_2.prototype.listWebhookAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listWebhookAdd', [\n\t    'id',\n\t    'url',\n\t    'actions',\n\t    'sources',\n\t], params, callback);\n}\n\n/**\n * Delete an existing Webhook URL from a given list.\n *\n * @see http://www.mailchimp.com/api/1.2/listwebhookdel.func.php\n */\nMailChimpAPI_v1_2.prototype.listWebhookDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listWebhookDel', [\n\t    'id',\n\t    'url',\n\t], params, callback);\n}\n\n/**\n * Return the Webhooks configured for the given list.\n *\n * @see http://www.mailchimp.com/api/1.2/listwebhooks.func.php\n */\nMailChimpAPI_v1_2.prototype.listWebhooks = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listWebhooks', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Retrieve all of the lists defined for your user account.\n *\n * @see http://www.mailchimp.com/api/1.2/lists.func.php\n */\nMailChimpAPI_v1_2.prototype.lists = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('lists', [\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************* Security Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Add an API Key to your account.\n *\n * @see http://www.mailchimp.com/api/1.2/apikeyadd.func.php\n */\nMailChimpAPI_v1_2.prototype.apikeyAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeyAdd', [\n\t    'username',\n\t    'password',\n\t], params, callback);\n}\n\n/**\n * Expire a Specific API Key.\n *\n * @see http://www.mailchimp.com/api/1.2/apikeyexpire.func.php\n */\nMailChimpAPI_v1_2.prototype.apikeyExpire = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeyExpire', [\n\t    'username',\n\t    'password',\n\t], params, callback);\n}\n\n/**\n * Retrieve a list of all MailChimp API Keys for this User.\n *\n * @see http://www.mailchimp.com/api/1.2/apikeys.func.php\n */\nMailChimpAPI_v1_2.prototype.apikeys = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeys', [\n\t    'username',\n\t    'password',\n\t    'expired',\n\t], params, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpAPI_v1_1.js":"var http = require('http'),\n    request = require('request'),\n    helpers = require('./helpers');\n\n/**\n * MailChimp API wrapper for the API version 1.1. This object should not be\n * instantiated directly but by using the version wrapper {@link MailChimpAPI}.\n *\n * @param apiKey The API key to access the MailChimp API with\n * @param options Configuration options\n * @return Instance of {@link MailChimpAPI_v1_1}\n */\nfunction MailChimpAPI_v1_1 (apiKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tthis.version     = '1.1';\n\tthis.apiKey      = apiKey;\n\tthis.secure      = options.secure || false;\n\tthis.packageInfo = options.packageInfo;\n\tthis.datacenter  = apiKey.split('-');\n\tthis.datacenter  = this.datacenter[1];\n\tthis.httpHost    = this.datacenter+'.api.mailchimp.com';\n\tthis.httpUri     = (this.secure) ? 'https://'+this.httpHost+':443' : 'http://'+this.httpHost+':80';\n\tthis.userAgent   = options.userAgent+' ' || '';\n\n}\n\nmodule.exports = MailChimpAPI_v1_1;\n\n/**\n * Sends a given request as a JSON object to the MailChimp API and finally\n * calls the given callback function with the resulting JSON object. This\n * method should not be called directly but will be used internally by all API\n * methods defined.\n *\n * @param method MailChimp API method to call\n * @param availableParams Parameters available for the specified API method\n * @param givenParams Parameters to call the MailChimp API with\n * @param callback Callback function to call on success\n */\nMailChimpAPI_v1_1.prototype.execute = function (method, availableParams, givenParams, callback) {\n\n\tvar finalParams = { apikey : this.apiKey };\n\tvar currentParam;\n\n\tfor (var i = 0; i < availableParams.length; i++) {\n\t\tcurrentParam = availableParams[i];\n\t\tif (typeof givenParams[currentParam] !== 'undefined')\n\t\t\tfinalParams[currentParam] = givenParams[currentParam];\n\t}\n\n\trequest({\n\t\turi : this.httpUri+'/'+this.version+'/?output=json&method='+method,\n\t\tmethod: 'POST',\n\t\theaders : { 'User-Agent' : this.userAgent+'node-mailchimp/'+this.packageInfo['version'] },\n\t\tbody : encodeURIComponent(JSON.stringify(finalParams))\n\t}, function (error, response, body) {\n\t\thelpers.handleMailChimpResponse(error, response, body, callback);\n\t});\n}\n\n/*****************************************************************************/\n/************************* Campaign Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Get the content (both html and text) for a campaign either as it would\n * appear in the campaign archive or as the raw, original content.\n *\n * @see http://www.mailchimp.com/api/1.1/campaigncontent.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignContent = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignContent', [\n\t\t'cid',\n\t\t'for_archive',\n\t], params, callback);\n}\n\n/**\n * Create a new draft campaign to send.\n *\n * @see http://www.mailchimp.com/api/1.1/campaigncreate.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignCreate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignCreate', [\n\t    'type',\n\t    'options',\n\t    'content',\n\t    'segment_opts',\n\t    'type_opts',\n\t], params, callback);\n}\n\n/**\n * Delete a campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaigndelete.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignDelete = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignDelete', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Attach Ecommerce Order Information to a Campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignecommaddorder.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignEcommAddOrder = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEcommAddOrder', [\n\t    'order',\n\t], params, callback);\n}\n\n/**\n * List all the folders for a user account.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignfolders.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignFolders = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignFolders', [\n\t], params, callback);\n}\n\n/**\n * Pause an AutoResponder or RSS campaign from sending.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignpause.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignPause = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignPause', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Replicate a campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignreplicate.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignReplicate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignReplicate', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Resume sending an AutoResponder or RSS campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignresume.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignResume = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignResume', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Schedule a campaign to be sent in the future.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignschedule.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignSchedule = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSchedule', [\n\t    'cid',\n\t    'schedule_time',\n\t    'schedule_time_b',\n\t], params, callback);\n}\n\n/**\n * Allows one to test their segmentation rules before creating a campaign using\n * them.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignsegmenttest.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignSegmentTest = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSegmentTest', [\n\t\t'list_id',\n\t\t'options',\n\t], params, callback);\n}\n\n/**\n * Send a given campaign immediately.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignsendnow.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignSendNow = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSendNow', [\n\t\t'cid',\n\t], params, callback);\n}\n\n/**\n * Send a test of this campaign to the provided email address.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignsendtest.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignSendTest = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSendTest', [\n\t\t'cid',\n\t\t'test_emails',\n\t\t'send_type',\n\t], params, callback);\n}\n\n/**\n * Retrieve all templates defined for your user account.\n *\n * @see http://www.mailchimp.com/api/1.1/campaigntemplates.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignTemplates = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignTemplates', [\n\t], params, callback);\n}\n\n/**\n * Unschedule a campaign that is scheduled to be sent in the future.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignunschedule.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignUnschedule = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUnschedule', [\n\t\t'cid',\n\t], params, callback);\n}\n\n/**\n * Update just about any setting for a campaign that has not been sent.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignupdate.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignUpdate = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUpdate', [\n\t\t'cid',\n\t\t'name',\n\t\t'value',\n\t], params, callback);\n}\n\n/**\n * Get the list of campaigns and their details matching the specified filters.\n *\n * @see http://www.mailchimp.com/api/1.1/campaigns.func.php\n */\nMailChimpAPI_v1_1.prototype.campaigns = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaigns', [\n\t\t'filter_id',\n\t\t'filter_folder',\n\t\t'filter_fromname',\n\t\t'filter_fromemail',\n\t\t'filter_title',\n\t\t'filter_subject',\n\t\t'filter_sendtimestart',\n\t\t'filter_sendtimeend',\n\t\t'filter_exact',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************** Campaign Stats Methods ***************************/\n/*****************************************************************************/\n\n/**\n * Get all email addresses that complained about a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignabusereports.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignAbuseReports = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignAbuseReports', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Get an array of the urls being tracked, and their click counts for a given\n * campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignclickstats.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignClickStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignClickStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Get all email addresses with Hard Bounces for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignhardbounces.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignHardBounces = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignHardBounces', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Get all email addresses with Soft Bounces for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignsoftbounces.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignSoftBounces = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignSoftBounces', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Given a list and a campaign, get all the relevant campaign statistics\n * (opens, bounces, clicks, etc.).\n *\n * @see http://www.mailchimp.com/api/1.1/campaignstats.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignStats = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignStats', [\n\t    'cid',\n\t], params, callback);\n}\n\n/**\n * Get all unsubscribed email addresses for a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignunsubscribes.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignUnsubscribes = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignUnsubscribes', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/*************************** Campaign AIM Methods  ***************************/\n/*****************************************************************************/\n\n/**\n * Return the list of email addresses that clicked on a given url, and how many\n * times they clicked.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignclickdetailaim.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignClickDetailAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignClickDetailAIM', [\n\t    'cid',\n\t    'url',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Given a campaign and email address, return the entire click and open history\n * with timestamps, ordered by time.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignemailstatsaim.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignEmailStatsAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailStatsAIM', [\n\t    'cid',\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Given a campaign and correct paging limits, return the entire click and open\n * history with timestamps, ordered by time, for every user a campaign was\n * delivered to.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignemailstatsaimall.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignEmailStatsAIMAll = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignEmailStatsAIMAll', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the list of email addresses that did not open a given campaign.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignnotopenedaim.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignNotOpenedAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignNotOpenedAIM', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Retrieve the list of email addresses that opened a given campaign with how\n * many times they opened - note: this AIM function is free and does not\n * actually require the AIM module to be installed.\n *\n * @see http://www.mailchimp.com/api/1.1/campaignopenedaim.func.php\n */\nMailChimpAPI_v1_1.prototype.campaignOpenedAIM = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('campaignOpenedAIM', [\n\t    'cid',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/****************************** Helper Methods *******************************/\n/*****************************************************************************/\n\n/**\n * Create a new folder to file campaigns in.\n *\n * @see http://www.mailchimp.com/api/1.1/createfolder.func.php\n */\nMailChimpAPI_v1_1.prototype.createFolder = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('createFolder', [\n\t\t'name',\n\t], params, callback);\n}\n\n/**\n * Have HTML content auto-converted to a text-only format.\n *\n * @see http://www.mailchimp.com/api/1.1/generatetext.func.php\n */\nMailChimpAPI_v1_1.prototype.generateText = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('generateText', [\n\t    'type',\n\t    'content',\n\t], params, callback);\n}\n\n/**\n * Retrieve your User Unique Id and your Affiliate link to display/use for\n * Monkey Rewards.\n *\n * @see http://www.mailchimp.com/api/1.1/getaffiliateinfo.func.php\n */\nMailChimpAPI_v1_1.prototype.getAffiliateInfo = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('getAffiliateInfo', [\n\t], params, callback);\n}\n\n/**\n * Send your HTML content to have the CSS inlined and optionally remove the\n * original styles.\n *\n * @see http://www.mailchimp.com/api/1.1/inlinecss.func.php\n */\nMailChimpAPI_v1_1.prototype.inlineCss = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('inlineCss', [\n\t    'html',\n\t    'strip_css',\n\t], params, callback);\n}\n\n/**\n * \"Ping\" the MailChimp API - a simple method you can call that will return a\n * constant value as long as everything is good.\n *\n * @see http://www.mailchimp.com/api/1.1/ping.func.php\n */\nMailChimpAPI_v1_1.prototype.ping = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('ping', [\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/*************************** List Related Methods ****************************/\n/*****************************************************************************/\n\n/**\n * Subscribe a batch of email addresses to a list at once.\n *\n * @see http://www.mailchimp.com/api/1.1/listbatchsubscribe.func.php\n */\nMailChimpAPI_v1_1.prototype.listBatchSubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listBatchSubscribe', [\n\t    'id',\n\t    'batch',\n\t    'double_optin',\n\t    'update_existing',\n\t    'replace_interests',\n\t], params, callback);\n}\n\n/**\n * Unsubscribe a batch of email addresses to a list.\n *\n * @see http://www.mailchimp.com/api/1.1/listbatchunsubscribe.func.php\n */\nMailChimpAPI_v1_1.prototype.listBatchUnsubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listBatchUnsubscribe', [\n\t    'id',\n\t    'emails',\n\t    'delete_member',\n\t    'send_goodbye',\n\t    'send_notify',\n\t], params, callback);\n}\n\n/**\n * Add a single Interest Group - if interest groups for the List are not yet\n * enabled, adding the first group will automatically turn them on.\n *\n * @see http://www.mailchimp.com/api/1.1/listinterestgroupadd.func.php\n */\nMailChimpAPI_v1_1.prototype.listInterestGroupAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupAdd', [\n\t    'id',\n\t    'group_name',\n\t    'grouping_id',\n\t    'optional',\n\t], params, callback);\n}\n\n/**\n * Delete a single Interest Group - if the last group for a list is deleted,\n * this will also turn groups for the list off.\n *\n * @see http://www.mailchimp.com/api/1.1/listinterestgroupdel.func.php\n */\nMailChimpAPI_v1_1.prototype.listInterestGroupDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupDel', [\n\t    'id',\n\t    'group_name',\n\t    'grouping_id',\n\t    'optional',\n\t], params, callback);\n}\n\n/**\n * Get the list of interest groupings for a given list, including the label,\n * form information, and included groups for each.\n *\n * @see http://www.mailchimp.com/api/1.1/listinterestgroupings.func.php\n */\nMailChimpAPI_v1_1.prototype.listInterestGroupings = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroupings', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Get the list of interest groups for a given list, including the label and\n * form information.\n *\n * @see http://www.mailchimp.com/api/1.1/listinterestgroups.func.php\n */\nMailChimpAPI_v1_1.prototype.listInterestGroups = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listInterestGroups', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Get all the information for particular members of a list.\n *\n * @see http://www.mailchimp.com/api/1.1/listmemberinfo.func.php\n */\nMailChimpAPI_v1_1.prototype.listMemberInfo = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMemberInfo', [\n\t    'id',\n\t    'email_address',\n\t], params, callback);\n}\n\n/**\n * Get all of the list members for a list that are of a particular status.\n *\n * @see http://www.mailchimp.com/api/1.1/listmembers.func.php\n */\nMailChimpAPI_v1_1.prototype.listMembers = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMembers', [\n\t    'id',\n\t    'status',\n\t    'start',\n\t    'limit',\n\t], params, callback);\n}\n\n/**\n * Add a new merge tag to a given list.\n *\n * @see http://www.mailchimp.com/api/1.1/listmergevaradd.func.php\n */\nMailChimpAPI_v1_1.prototype.listMergeVarAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarAdd', [\n\t    'id',\n\t    'tag',\n\t    'name',\n\t    'req',\n\t], params, callback);\n}\n\n/**\n * Delete a merge tag from a given list and all its members.\n *\n * @see http://www.mailchimp.com/api/1.1/listmergevardel.func.php\n */\nMailChimpAPI_v1_1.prototype.listMergeVarDel = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVarDel', [\n\t    'id',\n\t    'tag',\n\t], params, callback);\n}\n\n/**\n * Get the list of merge tags for a given list, including their name, tag, and\n * required setting.\n *\n * @see http://www.mailchimp.com/api/1.1/listmergevars.func.php\n */\nMailChimpAPI_v1_1.prototype.listMergeVars = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listMergeVars', [\n\t    'id',\n\t], params, callback);\n}\n\n/**\n * Subscribe the provided email to a list.\n *\n * @see http://www.mailchimp.com/api/1.1/listsubscribe.func.php\n */\nMailChimpAPI_v1_1.prototype.listSubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listSubscribe', [\n\t    'id',\n\t    'email_address',\n\t    'merge_vars',\n\t    'email_type',\n\t    'double_optin',\n\t], params, callback);\n}\n\n/**\n * Unsubscribe the given email address from the list.\n *\n * @see http://www.mailchimp.com/api/1.1/listunsubscribe.func.php\n */\nMailChimpAPI_v1_1.prototype.listUnsubscribe = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listUnsubscribe', [\n\t    'id',\n\t    'email_address',\n\t    'delete_member',\n\t    'send_goodbye',\n\t    'send_notify',\n\t], params, callback);\n}\n\n/**\n * Edit the email address, merge fields, and interest groups for a list member.\n *\n * @see http://www.mailchimp.com/api/1.1/listupdatemember.func.php\n */\nMailChimpAPI_v1_1.prototype.listUpdateMember = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('listUpdateMember', [\n\t    'id',\n\t    'email_address',\n\t    'merge_vars',\n\t    'email_type',\n\t    'replace_interests',\n\t], params, callback);\n}\n\n/**\n * Retrieve all of the lists defined for your user account.\n *\n * @see http://www.mailchimp.com/api/1.1/lists.func.php\n */\nMailChimpAPI_v1_1.prototype.lists = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('lists', [\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/************************* Security Related Methods **************************/\n/*****************************************************************************/\n\n/**\n * Add an API Key to your account.\n *\n * @see http://www.mailchimp.com/api/1.1/apikeyadd.func.php\n */\nMailChimpAPI_v1_1.prototype.apikeyAdd = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeyAdd', [\n\t    'username',\n\t    'password',\n\t], params, callback);\n}\n\n/**\n * Expire a Specific API Key.\n *\n * @see http://www.mailchimp.com/api/1.1/apikeyexpire.func.php\n */\nMailChimpAPI_v1_1.prototype.apikeyExpire = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeyExpire', [\n\t    'username',\n\t    'password',\n\t], params, callback);\n}\n\n/**\n * Retrieve a list of all MailChimp API Keys for this User.\n *\n * @see http://www.mailchimp.com/api/1.1/apikeys.func.php\n */\nMailChimpAPI_v1_1.prototype.apikeys = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('apikeys', [\n\t    'username',\n\t    'password',\n\t    'expired',\n\t], params, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpExportAPI.js":"var MailChimpExportAPI_v1_0 = require('./MailChimpExportAPI_v1_0'),\n    fs = require('fs');\n\n/**\n * Returns a MailChimp Export API wrapper object in the specified version. The\n * only API version currently supported (even the only version available at the\n * time of writing) is 1.0 but as soon as other versions are available and\n * implemented you can specify the one you want in the options parameter.\n *\n * Available options are:\n *  - version   The API version to use, currently only '1.0' is supported.\n *              Defaults to '1.0'.\n *  - secure    Whether or not to use secure connections over HTTPS\n *              (true/false). Defaults to false.\n *  - userAgent Custom User-Agent description to use in the request header.\n *\n * @param apiKey The API key to access the MailChimp Export API with\n * @param options Configuration options as described above\n * @return Instance of the MailChimp Export API in the specified version\n */\nfunction MailChimpExportAPI (apiKey, options) {\n\n  if (!options)\n    var options = {};\n\n  if (!apiKey)\n    throw new Error('You have to provide an API key for this to work.');\n\n  try {\n    var packageInfo = fs.readFileSync(__dirname+\"/../../package.json\");\n  } catch (error) {\n    throw new Error('Required package file package.json not found for this module.');\n  }\n  options.packageInfo = JSON.parse(packageInfo.toString());\n\n  if (!options.version || options.version == '1.0')\n    return new MailChimpExportAPI_v1_0(apiKey, options);\n  else\n    throw new Error('Version ' + options.version + ' of the MailChimp Export API is currently not supported.');\n\n}\n\nmodule.exports = MailChimpExportAPI;","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpExportAPI_v1_0.js":"var http = require('http'),\n    querystring = require('qs'),\n    request = require('request'),\n    helpers = require('./helpers');\n\n/**\n * MailChimp Export API wrapper for the API version 1.0. This object should not\n * be instantiated directly but by using the version wrapper\n * {@link MailChimpExportAPI}.\n *\n * @param apiKey The API key to access the MailChimp Export API with\n * @param options Configuration options\n * @return Instance of {@link MailChimpExportAPI_v1_0}\n */\nfunction MailChimpExportAPI_v1_0 (apiKey, options) {\n\n  if (!options)\n    var options = {};\n\n  this.version     = '1.0';\n  this.apiKey      = apiKey;\n  this.secure      = options.secure || false;\n  this.packageInfo = options.packageInfo;\n  this.datacenter  = apiKey.split('-');\n  this.datacenter  = this.datacenter[1];\n  this.httpHost    = this.datacenter+'.api.mailchimp.com';\n  this.httpUri     = (this.secure) ? 'https://'+this.httpHost+':443' : 'http://'+this.httpHost+':80';\n  this.userAgent   = options.userAgent+' ' || '';\n\n}\n\nmodule.exports = MailChimpExportAPI_v1_0;\n\n/**\n * Sends a given request as a JSON object to the MailChimp Export API and\n * finally calls the given callback function with the resulting JSON object.\n * This method should not be called directly but will be used internally by all\n * API methods defined.\n *\n * @param method MailChimp API method to call\n * @param availableParams Parameters available for the specified API method\n * @param givenParams Parameters to call the MailChimp API with\n * @param callback Callback function to call on success\n */\nMailChimpExportAPI_v1_0.prototype.execute = function (method, availableParams, givenParams, callback) {\n\n  var self = this;\n\n  var finalParams = { apikey : this.apiKey };\n  var currentParam;\n\n  for (var i = 0; i < availableParams.length; i++) {\n    currentParam = availableParams[i];\n    if (typeof givenParams[currentParam] !== 'undefined')\n      finalParams[currentParam] = givenParams[currentParam];\n  }\n\n  var query = querystring.stringify(finalParams);\n\n  request({\n    uri : this.httpUri+'/export/'+this.version+'/'+method+'/?'+query,\n    headers : { 'User-Agent' : this.userAgent+'node-mailchimp/'+this.packageInfo['version'] }\n  }, function (error, response, body) {\n    if (error) {\n      callback(new Error('Unable to connect to the MailChimp API endpoint.'));\n    } else {\n      var processFunction = eval(\"self.\"+method+\"Process\");\n      if (typeof processFunction == 'function') {\n        processFunction(body, callback);\n      } else {\n        var parsedResponse;\n        try {\n          parsedResponse = JSON.parse(body);\n        } catch (error) {\n          callback(new Error('Error parsing JSON answer from MailChimp API.'));\n          return;\n        }\n        callback(null, parsedResponse);\n      }\n    }\n  });\n\n}\n\n/**\n * Exports/dumps members of a list and all of their associated details. This is\n * very similar to exporting via the web interface.\n *\n * @see http://apidocs.mailchimp.com/export/1.0/list.func.php\n */\nMailChimpExportAPI_v1_0.prototype.list = function (params, callback) {\n  if (typeof params == 'function') callback = params, params = {};\n  this.execute('list', [\n    'id',\n    'status',\n    'segment',\n    'since',\n  ], params, callback);\n}\n\n/**\n * Process the response from the list API call and pass it to the callback\n * function.\n */\nMailChimpExportAPI_v1_0.prototype.listProcess = function (data, callback) {\n\n  var resultStrings = data.split(\"\\n\");\n  var resultJSON    = [];\n\n  for (current in resultStrings) {\n    if (typeof resultStrings[current] == 'string' && resultStrings[current] !== \"\")\n      resultJSON.push(JSON.parse(resultStrings[current]));\n  }\n\n  if (resultJSON[0] && resultJSON[0].error)\n    callback(helpers.createMailChimpError(resultJSON[0].error, resultJSON[0].code));\n  else\n    callback(null, resultJSON);\n\n}\n\n/**\n * Exports/dumps all Subscriber Activity for the requested campaign.\n *\n * @see http://apidocs.mailchimp.com/export/1.0/campaignsubscriberactivity.func.php\n */\nMailChimpExportAPI_v1_0.prototype.campaignSubscriberActivity = function (params, callback) {\n  if (typeof params == 'function') callback = params, params = {};\n  this.execute('campaignSubscriberActivity', [\n    'id',\n    'include_empty',\n    'since'\n  ], params, callback);\n}\n\n/**\n * Process the response from the campaignSubscriberActivity API call and pass\n * it to the callback function.\n */\nMailChimpExportAPI_v1_0.prototype.campaignSubscriberActivityProcess = function (data, callback) {\n\n  // When API returns no subscriber activity return an empty array\n  if (typeof data === 'undefined' ||\n      data.length === 0 ||\n      data.trim().length === 0) {\n    callback(null, []);\n    return;\n  }\n\n  var resultStrings = data.split(\"\\n\");\n  var resultJSON    = [];\ntry{\n  for (current in resultStrings) {\n    if (typeof resultStrings[current] == 'string' && resultStrings[current] !== \"\")\n      resultJSON.push(JSON.parse(resultStrings[current]));\n  }\n\n  if (resultJSON[0] && resultJSON[0].error)\n    callback(helpers.createMailChimpError(resultJSON[0].error, resultJSON[0].code));\n  else\n    callback(null, resultJSON);\n    }catch(e){   callback(new Error('Error, JSON received from Mailchimp was not valid'), null);\n\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpWebhook.js":"var http = require('http'),\n    util = require('util'),\n    url = require('url'),\n    qs = require('qs'),\n    EventEmitter = require('events').EventEmitter;\n\n/**\n * A server that listens for POST requests from MailChimp which are issued on\n * special events as specified on their Webhook page. Please refer to that page\n * on how to set everything up.\n *\n * @see http://www.mailchimp.com/api/webhooks/\n *\n * If the server receives a valid request from MailChimp the received data is\n * wrapped in a nice object and an event is emitted which you can listen for\n * in your application and then take further action.\n *\n * Available options are:\n *  - port   Port the server is going to listen on. Defaults to 8100.\n *  - secret Secret key as suggested on the Webhook page which is then simply\n *           added as a pathname to the Webhook URL in your MailChimp account\n *           and checked for here. Nothing too fancy but a small enhancement to\n *           security. Leave empty (default setting) if you don't want to use a\n *           secret key. Example: If you set the secret to 'ChimpSecret' you\n *           would enter the Webhook URL http://www.yourdomain.com/ChimpSecret\n *           in the MailChimp Webhook settings.\n *  - secure Takes credentials generated by the crypto module and enables HTTPS\n *           support for the server when present.\n *\n * @param options Configuration options\n * @return Instance of {@link MailChimpWebhook}\n */\nfunction MailChimpWebhook (options) {\n\n\tvar self = this;\n\n\tif (!options)\n\t\toptions = {};\n\n\tEventEmitter.call(this);\n\n\tthis.httpPort = options.port || 8100;\n\tthis.secret = options.secret || '';\n\tthis.secure = options.secure || false;\n\n\tthis.allowedTypes = [\n\t                     'subscribe',\n\t                     'unsubscribe',\n\t                     'profile',\n\t                     'upemail',\n\t                     'cleaned',\n                         'campaign'\n\t                    ];\n\n\tvar server = http.createServer(function (request, response) {\n\n\t\tvar requestBody = '';\n\t\tvar requestUrl = url.parse(request.url);\n\n\t\tif (self.secret !== '' && requestUrl.pathname !== '/'+self.secret) {\n\t\t\tself.emit('error', 'Received a request with an invalid secret key.');\n\t\t\tresponse.writeHead(500, { 'Content-Type' : 'text/plain' });\n\t\t\tresponse.end();\n\t\t\treturn;\n\t\t}\n\n\t\t// Say \"hi\" to the webhook validator, the only request not sent via POST\n\t\tif (request.headers['user-agent'] === 'MailChimp.com WebHook Validator') {\n\t\t\tresponse.writeHead(200, { 'Content-Type' : 'text/plain' });\n\t\t\tresponse.end();\n\t\t\treturn;\n\t\t}\n\n\t\tif (request.method != 'POST') {\n\t\t\tself.emit('error', 'Received something other than a POST request.');\n\t\t\tresponse.writeHead(500, { 'Content-Type' : 'text/plain' });\n\t\t\tresponse.end();\n\t\t\treturn;\n\t\t}\n\n        request.on('data', function (chunk) {\n        \trequestBody += chunk;\n        });\n\n        request.on('end', function () {\n\n        \tvar payload = qs.parse(requestBody);\n    \t\tvar meta = { type : payload.type, fired_at : payload.fired_at };\n    \t\tvar data = payload.data;\n\n    \t\tif (meta.type && ~self.allowedTypes.indexOf(meta.type)) {\n    \t\t\tself.emit(payload.type, data, meta);\n    \t\t\tresponse.writeHead(200, { 'Content-Type' : 'text/plain' });\n    \t\t\tresponse.end();\n    \t\t} else {\n    \t\t\tself.emit('error', 'Received a request with an unknown type of payload.');\n    \t\t\tresponse.writeHead(500, { 'Content-Type' : 'text/plain' });\n    \t\t\tresponse.end();\n    \t\t}\n\n        });\n\n\t});\n\n\tif (this.secure)\n\t\tserver.setSecure(this.secure);\n\n\tserver.listen(this.httpPort);\n\n}\n\nutil.inherits(MailChimpWebhook, EventEmitter);\nmodule.exports = MailChimpWebhook;\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpOAuth.js":"var http = require('http'),\n    https = require('http'),\n    util = require('util'),\n    url = require('url'),\n    querystring = require('querystring'),\n    EventEmitter = require('events').EventEmitter,\n    fs = require('fs'),\n    request = require('request');\n\n/**\n * Provides functionality for OAuth2 authorization with MailChimp. A server is\n * set up that listens for requests from MailChimp that are made upon\n * successful user authentication. Using this server the whole workflow\n * necessary to authorize against MailChimp is made available.\n *\n * The workflow using this module in short is as follows. An example can be\n * found in the README.\n *\n *  1) Instatiate MailChimpOAuth.\n *  2) Send the user to the MailChimp login form using the url returned from\n *     MailChimpOAuth.getAuthorizeUri();\n *  3) Listen for the 'authed' event and pass MailChimpOAuth.api as th API key\n *     to whatever MailChimp API methods you want to use.\n *\n * Details on the process and further information on how to set everything up\n * are available in the MailChimp API docs.\n *\n * @see http://apidocs.mailchimp.com/oauth2/\n *\n * Available options are:\n * `clientId` The clientId can be obtained from MailChimp, please refer to the API docs on how to do this. The clientId is a required parameter.\n * `clientSecret` The clientSecret can be obtained from MailChimp, please refer to the API docs on how to do this. The clientSecret is a required parameter.\n * `redirectUri` Redirect URI from MailChimp App Configuration\n * `ownServer` Boolean to enable own custom server for listening to redirect URI. Defaults to false.\n * `addPort` Boolean to add value of port number in redirectUri defaults to false.\n * `port` The port the server is going to listen on. Defaults to 8100.\n These fields are not needed if ownServer is false\n * `finalUri` After a successful authorization on the MailChimp website the user is redirected to this URI, if any.\n * `secure` Credentials in the form {key:path to ssl key file, cert: path to ssl certificate file} . If present HTTPS support is enabled for the server. Defaults to false.\n You can register the following events:\n\n * `error` This event is emitted when an error occured and receives one argument that contains the error message.\n * `authed` Emitted when the OAuth was completed successfully. Receives one argument which represents the API key that can be passed on to other API functionality.\n *\n * @param options Configuration options\n * @return Nothing. Emits an 'authed' event instead which indicates everything\n *         went fine\n */\nfunction MailChimpOAuth(options) {\n\n  var self = this;\n  options = options || {};\n\n  EventEmitter.call(this);\n\n  this.httpPort = options.port || 8100;\n  this.spawnServerFlag = options.ownServer || false;\n  this.secure = options.secure || false;\n  this.finalUri = options.finalUri || false;\n  this.addPort = options.addPort || false;\n  if (typeof options.clientId !== 'undefined') {\n    this.clientId = options.clientId;\n  } else {\n    throw new Error('You have to specify the client id for this to work.');\n  }\n\n  if (typeof options.clientSecret !== 'undefined') {\n    this.clientSecret = options.clientSecret;\n  } else {\n    throw new Error('You have to specify the client secret for this to work.');\n  }\n\n  if (typeof options.redirectUri !== 'undefined') {\n    this.redirectUri = options.redirectUri;\n  } else {\n    throw new Error('You have to specify a uri for this server as MailChimp needs to reach it from the outside.');\n  }\n\n  try {\n    var packageInfo = fs.readFileSync(__dirname + \"/../../package.json\");\n  } catch (error) {\n    throw new Error('Required package file package.json not found for this module.');\n  }\n    this.packageInfo = JSON.parse(packageInfo.toString());\n\n    this.on('receivedCode', function (customParams) {\n      self.getAccessToken(customParams);\n    });\n\n    this.on('receivedAccessToken', function (customParams) {\n      self.getMetadata(customParams);\n    });\n\n    this.on('receivedMetadata', function (customParams) {\n      self.emit('authed', customParams);\n    });\n\n    if (this.spawnServerFlag)\n      this.spawnServer();\n\n}\n\nutil.inherits(MailChimpOAuth, EventEmitter);\nmodule.exports = MailChimpOAuth;\n\n/**\n * Spawns a server that listens for incoming GET requests. The url to the\n * server is passed on to MailChimp as a get parameter to the authorization\n * form. When a request is received and valid the chain of authorization is set\n * in motion. This method should not be called directly but will be used\n * internally when needed.\n *\n * @return Nothing. Emits either an 'error' or a 'receivedCode' event\n */\nMailChimpOAuth.prototype.spawnServer = function () {\n\n  var self = this;\n  var callback = function (request, response) {\n\n    if (request.method != 'GET') {\n      self.emit('error', {err: 'Received something other than a GET request.', data:undefined});\n      response.writeHead(500, {'Content-Type': 'text/plain'});\n      response.end();\n      return;\n    }\n\n    var requestUrl = url.parse(request.url);\n    var query = querystring.parse(requestUrl.query) || {};\n\n    if (typeof query.code !== 'undefined') {\n      self.emit('receivedCode', query);\n      if (self.finalUri) {\n        response.writeHead(302, {'Location': self.finalUri});\n        response.end();\n      } else {\n        response.writeHead(204, {'Content-Type': 'text/plain'});\n        response.end();\n      }\n    } else {\n      self.emit('error', {err: 'Received a request without a code.', data:query});\n      response.writeHead(500, {'Content-Type': 'text/plain'});\n      response.end();\n    }\n  };\n  var server;\n\n\n  if (this.secure) {\n    if (this.secure.key && this.secure.cert) {\n      const options = {\n        key: fs.readFileSync(this.secure.key),\n        cert: fs.readFileSync(this.secure.cert)\n      };\n      server = https.createServer(options, callback);\n    }\n    else {\n      throw new Error('You have to specify the complete ssl credentials for this to work.with key and code');\n    }\n  }\n\n  else\n    server = http.createServer(callback);\n\n  server.listen(this.httpPort);\n\n}\n\n/**\n * handle response from\n * @return Nothing. Emits either an 'error' or a 'receivedCode' event\n */\nMailChimpOAuth.prototype.handleOAuthResponse = function (customParams) {\n  var self = this;\n  customParams = customParams || {};\n  if (typeof customParams.code !== 'undefined') {\n    self.emit('receivedCode', customParams);\n  } else {\n    self.emit('error', {err: 'Received a request without a code.', data:customParams});\n  }\n};\n\n/**\n * Assembles and returns a URI the user needs to be send to for authorization,\n * on that page the MailChimp login form is shown and the user prompted for his\n * username and password. The URI includes a link to the server spawned while\n * instantiating MailChimpOAuth.\n *\n * @return URI to the autorization page\n */\nMailChimpOAuth.prototype.getAuthorizeUri = function () {\n\n  var params = {\n    response_type: 'code',\n    client_id: this.clientId,\n    redirect_uri: this.addPort ? this.redirectUri + ':' + this.httpPort : this.redirectUri\n  };\n\n  return 'https://login.mailchimp.com/oauth2/authorize?' + querystring.stringify(params);\n\n}\n\n/**\n * Get the access token from MailChimp once the code for a successful\n * authorization was received. When the access token was successfully received\n * an event is emitted which MailChimpOAuth is listening on to request the\n * OAuth metadata. This method should not be called directly but will be used\n * internally when needed.\n *\n * @return Nothing. Emits either an 'error' or a 'receivedAccessToken' event\n */\nMailChimpOAuth.prototype.getAccessToken = function (customParams) {\n\n  var self = this;\n  customParams = customParams || {};\n  if (!customParams.code) {\n    self.emit('error', {err: 'Code is required in Params', data:customParams});\n    return;\n  }\n  var params = {\n    grant_type: 'authorization_code',\n    client_id: this.clientId,\n    client_secret: this.clientSecret,\n    code: customParams.code,\n    redirect_uri: this.addPort ? this.redirectUri + ':' + this.httpPort : this.redirectUri\n  };\n\n  request({\n    uri: 'https://login.mailchimp.com/oauth2/token',\n    method: 'POST',\n    headers: {\n      'User-Agent': 'node-mailchimp/' + this.packageInfo['version'],\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: querystring.stringify(params)\n  }, function (error, response, body) {\n\n    var parsedResponse;\n\n    if (error) {\n      self.emit('error', {err: 'Unable to connect to the MailChimp OAuth service.', data:customParams});\n    } else {\n\n      try {\n        parsedResponse = JSON.parse(body);\n      } catch (error) {\n        console.log('[MailChimp] Error parsing JSON answer from the MailChimp getAccessToken API.', body);\n        self.emit('error', {err: 'Error parsing JSON answer from the MailChimp getAccessToken API.', data:customParams});\n        return;\n      }\n\n      if (typeof parsedResponse.access_token !== 'undefined') {\n        customParams.accessToken = parsedResponse.access_token;\n        self.emit('receivedAccessToken', customParams);\n      } else {\n        self.emit('error', {err: 'Answer from MailChimp API does not contain an access token.', data:customParams});\n      }\n\n    }\n\n  });\n\n}\n\n/**\n * Get metadata from MailChimp once the access token was received. When the\n * metadata was successfully received an event is emitted which MailChimpOAuth\n * is listening on to finalize the authentication process. This method should\n * not be called directly but will be used internally when needed.\n *\n * @return Nothing. Emits either an 'error' or a 'receivedMetadata' event\n */\nMailChimpOAuth.prototype.getMetadata = function (customParams) {\n\n  var self = this;\n  customParams = customParams || {};\n  if (!customParams.accessToken) {\n    self.emit('error', {err: 'accessToken is required in Params', data:customParams});\n    return;\n  }\n  request({\n    uri: 'https://login.mailchimp.com/oauth2/metadata',\n    headers: {\n      'User-Agent': 'node-mailchimp/' + this.packageInfo['version'],\n      'Authorization': 'OAuth ' + customParams.accessToken\n    }\n  }, function (error, response, body) {\n\n    var parsedResponse;\n\n    if (error) {\n      self.emit('error', {err: 'Unable to connect to the MailChimp OAuth service.', data:customParams});\n      return;\n    } else {\n\n      try {\n        parsedResponse = JSON.parse(body);\n      } catch (error) {\n        console.error('[MailChimp] Error parsing JSON answer from the MailChimp getMetadata API.', body);\n        self.emit('error', {err: 'Error parsing JSON answer from the MailChimp getMetadata API.', data:customParams});\n        return;\n      }\n\n      if (typeof parsedResponse.dc !== 'undefined') {\n        customParams.metadata = parsedResponse;\n        customParams.apiKey = customParams.accessToken + '-' + customParams.metadata.dc;\n        self.emit('receivedMetadata', customParams);\n      } else {\n        self.emit('error', {err: 'Answer from MailChimp API does not contain a datacenter pointer.', data:customParams});\n      }\n\n    }\n\n  });\n\n}","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpPartnerAPI.js":"var MailChimpPartnerAPI_v1_3 = require('./MailChimpPartnerAPI_v1_3'),\n    fs = require('fs');\n\n/**\n * Returns a MailChimp Partner API wrapper object of the specified version. All\n * API versions available at the time of writing (only 1.3) are supported.\n *\n * Available options are:\n *  - version   The API version to use (1.3). Defaults to 1.3.\n *  - secure    Whether or not to use secure connections over HTTPS\n *              (true/false). Defaults to false.\n *  - userAgent Custom User-Agent description to use in the request header.\n *\n * @param appKey The app key to access the MailChimp Partner API with\n * @param options Configuration options as described above\n * @return Instance of the MailChimp Partner API in the specified version\n */\nfunction MailChimpPartnerAPI (appKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tif (!appKey)\n\t\tthrow new Error('You have to provide an app key for this to work.');\n\n\ttry {\n\t\tvar packageInfo = fs.readFileSync(__dirname+\"/../../package.json\");\n\t} catch (error) {\n\t\tthrow new Error('Required package file package.json not found for this module.');\n\t}\n\toptions.packageInfo = JSON.parse(packageInfo.toString());\n\n\tif (!options.version || options.version == '1.3')\n\t\treturn new MailChimpPartnerAPI_v1_3(appKey, options);\n\telse\n\t\tthrow new Error('Version ' + options.version + ' of the MailChimp Partner API is currently not supported.');\n\n}\n\nmodule.exports = MailChimpPartnerAPI;","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MailChimpPartnerAPI_v1_3.js":"var http = require('http'),\n    request = require('request'),\n    helpers = require('./helpers');\n\n/**\n * MailChimp Partner API wrapper for the API version 1.3. This object should\n * not be instantiated directly but by using the version wrapper\n * {@link MailChimpPartnerAPI}.\n *\n * @param appKey The app key to access the MailChimp Partner API with\n * @param options Configuration options\n * @return Instance of {@link MailChimpPartnerAPI_v1_3}\n */\nfunction MailChimpPartnerAPI_v1_3 (appKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tthis.version     = '1.3';\n\tthis.appKey      = appKey;\n\tthis.secure      = options.secure || false;\n\tthis.packageInfo = options.packageInfo;\n\tthis.datacenter  = appKey.split('-');\n\tthis.datacenter  = this.datacenter[1];\n\tthis.httpHost    = this.datacenter+'.partner-api.mailchimp.com';\n\tthis.httpUri     = (this.secure) ? 'https://'+this.httpHost+':443' : 'http://'+this.httpHost+':80';\n\tthis.userAgent   = options.userAgent+' ' || '';\n\n}\n\nmodule.exports = MailChimpPartnerAPI_v1_3;\n\n/**\n * Sends a given request as a JSON object to the MailChimp Partner API and\n * finally calls the given callback function with the resulting JSON object.\n * This method should not be called directly but will be used internally by all\n * API methods defined.\n *\n * @param method MailChimp Partner API method to call\n * @param availableParams Parameters available for the specified API method\n * @param givenParams Parameters to call the MailChimp Partner API with\n * @param callback Callback function to call on success\n */\nMailChimpPartnerAPI_v1_3.prototype.execute = function (method, availableParams, givenParams, callback) {\n\n\tvar finalParams = { app_key : this.appKey };\n\tvar currentParam;\n\n\tfor (var i = 0; i < availableParams.length; i++) {\n\t\tcurrentParam = availableParams[i];\n\t\tif (typeof givenParams[currentParam] !== 'undefined')\n\t\t\tfinalParams[currentParam] = givenParams[currentParam];\n\t}\n\n\trequest({\n\t\turi : this.httpUri+'/'+this.version+'/?method='+method,\n\t\tmethod: 'POST',\n\t\theaders : { 'User-Agent' : this.userAgent+'node-mailchimp/'+this.packageInfo['version'] },\n\t\tbody : encodeURIComponent(JSON.stringify(finalParams))\n\t}, function (error, response, body) {\n\t\thelpers.handleMailChimpResponse(error, response, body, callback);\n\t});\n\n}\n\n/*****************************************************************************/\n/*************************** List Related Methods ****************************/\n/*****************************************************************************/\n\n/**\n * Create a List for the given user.\n *\n * @see http://apidocs.mailchimp.com/partnerapi/1.3/createlist.func.php\n */\nMailChimpPartnerAPI_v1_3.prototype.createList = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('createList', [\n\t    'apikey',\n\t    'detail',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/*************************** User Related Methods ****************************/\n/*****************************************************************************/\n\n/**\n * Check whether a username is available.\n *\n * @see http://apidocs.mailchimp.com/partnerapi/1.3/checkusername.func.php\n */\nMailChimpPartnerAPI_v1_3.prototype.checkUsername = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('checkUsername', [\n\t    'username',\n\t], params, callback);\n}\n\n/**\n * Create a user account and login.\n *\n * @see http://apidocs.mailchimp.com/partnerapi/1.3/createuser.func.php\n */\nMailChimpPartnerAPI_v1_3.prototype.createUser = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('createUser', [\n\t    'details',\n\t    'username',\n\t], params, callback);\n}\n\n/**\n * Return the datacenter that should be used when making createUser() calls.\n *\n * @see http://apidocs.mailchimp.com/partnerapi/1.3/getnewuserdc.func.php\n */\nMailChimpPartnerAPI_v1_3.prototype.getNewUserDc = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('getNewUserDc', [\n\t], params, callback);\n}\n","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MandrillAPI.js":"var MandrillAPI_v1_0 = require('./MandrillAPI_v1_0'),\n    fs = require('fs');\n\n/**\n * Returns a Mandrill API wrapper object in the specified version. The only API\n * version currently supported (even the only version available at the time of\n * writing) is 1.0 but as soon as other versions are available and\n * implemented you can specify the one you want in the options parameter.\n *\n * Available options are:\n *  - version   The API version to use, currently only '1.0' is supported.\n *              Defaults to '1.0'.\n *  - secure    Whether or not to use secure connections over HTTPS\n *              (true/false). Defaults to false.\n *  - userAgent Custom User-Agent description to use in the request header.\n *\n * @param apiKey The API key to access the Mandrill API with\n * @param options Configuration options as described above\n * @return Instance of the Mandrill API in the specified version\n */\nfunction MandrillAPI (apiKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tif (!apiKey)\n\t\tthrow new Error('You have to provide an API key for this to work.');\n\n\ttry {\n\t\tvar packageInfo = fs.readFileSync(__dirname+\"/../../package.json\");\n\t} catch (error) {\n\t\tthrow new Error('Required package file package.json not found for this module.');\n\t}\n\toptions.packageInfo = JSON.parse(packageInfo.toString());\n\n\tif (!options.version || options.version == '1.0')\n\t\treturn new MandrillAPI_v1_0(apiKey, options);\n\telse\n\t\tthrow new Error('Version ' + options.version + ' of the Mandrill API is currently not supported.');\n\n}\n\nmodule.exports = MandrillAPI;","/home/travis/build/npmtest/node-npmtest-mailchimp/node_modules/mailchimp/lib/mailchimp/MandrillAPI_v1_0.js":"var http = require('http'),\n    request = require('request'),\n    helpers = require('./helpers');\n\n/**\n * Mandrill API wrapper for the API version 1.0. This object should not be\n * instantiated directly but by using the version wrapper {@link MandrillAPI}.\n *\n * @param apiKey The API key to access the Mandrill API with\n * @param options Configuration options\n * @return Instance of {@link MandrillAPI_v1_0}\n */\nfunction MandrillAPI_v1_0 (apiKey, options) {\n\n\tif (!options)\n\t\tvar options = {};\n\n\tthis.version     = '1.0';\n\tthis.apiKey      = apiKey;\n\tthis.secure      = options.secure || false;\n\tthis.packageInfo = options.packageInfo;\n\tthis.httpHost    = 'mandrillapp.com';\n\tthis.httpUri     = (this.secure) ? 'https://'+this.httpHost+':443' : 'http://'+this.httpHost+':80';\n\tthis.userAgent   = options.userAgent+' ' || '';\n\n}\n\nmodule.exports = MandrillAPI_v1_0;\n\n/**\n * Sends a given request as a HTTP POST (application/x-www-form-urlencoded) to\n * the Mandrill API and finally calls the given callback function with the\n * resulting JSON object. This method should not be called directly but will be\n * used internally by all API methods defined.\n *\n * @param method Mandrill API method to call\n * @param availableParams Parameters available for the specified API method\n * @param givenParams Parameters to call the Mandrill API with\n * @param callback Callback function to call on success\n */\nMandrillAPI_v1_0.prototype.execute = function (method, availableParams, givenParams, callback) {\n\n    var finalParams = { key : this.apiKey };\n    var currentParam;\n\n\tfor (var i = 0; i < availableParams.length; i++) {\n\t\tcurrentParam = availableParams[i];\n\t\tif (typeof givenParams[currentParam] !== 'undefined')\n\t\t\tfinalParams[currentParam] = givenParams[currentParam];\n\t}\n\n\trequest({\n\t\turi : this.httpUri+'/api/'+this.version+'/'+method,\n\t\tmethod: 'POST',\n\t\theaders : {\n                      'Content-Type': 'application/x-www-form-urlencoded',\n                      'User-Agent' : this.userAgent+'node-mailchimp/'+this.packageInfo['version']\n                  },\n        body : JSON.stringify(finalParams)\n\t}, function (error, response, body) {\n\t\tvar parsedResponse;\n\t\tif (error) {\n\t\t\tcallback(new Error('Unable to connect to the Mandrill API endpoint.'));\n\t\t} else {\n\n\t\t\ttry {\n\t\t\t\tparsedResponse = JSON.parse(body);\n\t\t\t} catch (error) {\n\t\t\t\tcallback(new Error('Error parsing JSON answer from Mandrill API.'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof parsedResponse.status != 'undefined' && parsedResponse.status === 'error') {\n\t\t\t\tcallback(new Error(parsedResponse.message));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcallback(null, parsedResponse);\n\n\t\t}\n\t});\n\n}\n\n/**\n * You can either call the API methods directly or using this function which\n * assembles the name of the API method from a given method category and\n * method name. Categories and methods are described in the Mandrill API\n * Documentation.\n *\n * @see http://mandrillapp.com/api/docs/\n *\n * @param category The category of the API method to call (e.g. 'users')\n * @param method The method to call in the given category\n * @param params Parameters to pass to the API method\n * @param callback Callback function for returned data or errors\n */\n\nMandrillAPI_v1_0.prototype.call = function (category, method, params, callback) {\n\n\tif (typeof params == 'function') callback = params, params = {};\n\n\tif (typeof category != 'string' || typeof method != 'string') {\n\t\tcallback(new Error('You have to provide the category and the name of the method to call.'));\n\t\treturn;\n\t}\n\n\tvar methodToCall = category+'_'+method.replace(/\\-/g, '_');\n\n\tif (typeof this[methodToCall] == 'function') {\n\t\tthis[methodToCall](params, callback);\n\t} else {\n\t\tcallback(new Error('The API method '+methodToCall+' does not exist.'));\n\t\treturn;\n\t}\n\n}\n\n/*****************************************************************************/\n/******************************** Users Calls ********************************/\n/*****************************************************************************/\n\n/**\n * Return the information about the API-connected user.\n *\n * @see https://mandrillapp.com/api/docs/users.html#method=info\n */\nMandrillAPI_v1_0.prototype.users_info = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('users/info', [\n\t], params, callback);\n}\n\n/**\n * Validate an API key and respond to a ping.\n *\n * @see https://mandrillapp.com/api/docs/users.html#method=ping\n */\nMandrillAPI_v1_0.prototype.users_ping = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('users/ping', [\n\t], params, callback);\n}\n\n/**\n * Validate an API key and respond to a ping (anal JSON parser version).\n *\n * @see https://mandrillapp.com/api/docs/users.html#method=ping2\n */\nMandrillAPI_v1_0.prototype.users_ping2 = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('users/ping2', [\n\t], params, callback);\n}\n\n/**\n * Return the senders that have tried to use this account, both verified and\n * unverified.\n *\n * @see https://mandrillapp.com/api/docs/users.html#method=senders\n */\nMandrillAPI_v1_0.prototype.users_senders = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('users/senders', [\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/****************************** Messages Calls *******************************/\n/*****************************************************************************/\n\n/**\n * Send a new transactional message through Mandrill.\n *\n * @see https://mandrillapp.com/api/docs/messages.html#method=send\n */\nMandrillAPI_v1_0.prototype.messages_send = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('messages/send', [\n\t\t'message',\n\t\t'async',\n\t], params, callback);\n}\n\n/**\n * Send a new transactional message through Mandrill using a template.\n *\n * @see https://mandrillapp.com/api/docs/messages.html#method=send-template\n */\nMandrillAPI_v1_0.prototype.messages_send_template = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('messages/send-template', [\n\t\t'template_name',\n\t\t'template_content',\n\t\t'message',\n\t\t'async',\n\t], params, callback);\n}\n\n/**\n * Search the content of recently sent messages and optionally narrow by date\n * range, tags and senders.\n *\n * @see https://mandrillapp.com/api/docs/messages.html#method=search\n */\nMandrillAPI_v1_0.prototype.messages_search = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('messages/search', [\n\t\t'query',\n\t\t'date_from',\n\t\t'date_to',\n\t\t'tags',\n\t\t'senders',\n\t\t'limit',\n\t], params, callback);\n}\n\n/**\n * Parse the full MIME document for an email message, returning the content of\n * the message broken into its constituent pieces.\n *\n * @see https://mandrillapp.com/api/docs/messages.html#method=parse\n */\nMandrillAPI_v1_0.prototype.messages_parse = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('messages/parse', [\n\t\t'raw_message',\n\t], params, callback);\n}\n\n/**\n * Take a raw MIME document for a message, and send it exactly as if it were\n * sent over the SMTP protocol.\n *\n * @see https://mandrillapp.com/api/docs/messages.html#method=send-raw\n */\nMandrillAPI_v1_0.prototype.messages_send_raw = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('messages/send-raw', [\n\t\t'raw_message',\n\t\t'from_email',\n\t\t'from_name',\n\t\t'to',\n\t\t'async',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/******************************** Tags Calls *********************************/\n/*****************************************************************************/\n\n/**\n * Return all of the user-defined tag information.\n *\n * @see https://mandrillapp.com/api/docs/tags.html#method=list\n */\nMandrillAPI_v1_0.prototype.tags_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('tags/list', [\n\t], params, callback);\n}\n\n/**\n * Deletes a tag permanently. Deleting a tag removes the tag from any messages\n * that have been sent, and also deletes the tag's stats. There is no way to\n * undo this operation, so use it carefully.\n *\n * @see https://mandrillapp.com/api/docs/tags.html#method=delete\n */\nMandrillAPI_v1_0.prototype.tags_delete = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('tags/delete', [\n\t\t'tag',\n\t], params, callback);\n}\n\n/**\n * Return more detailed information about a single tag, including aggregates of\n * recent stats.\n *\n * @see https://mandrillapp.com/api/docs/tags.html#method=info\n */\nMandrillAPI_v1_0.prototype.tags_info = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('tags/info', [\n\t\t'tag',\n\t], params, callback);\n}\n\n/**\n * Return the recent history (hourly stats for the last 30 days) for a tag.\n *\n * @see https://mandrillapp.com/api/docs/tags.html#method=time-series\n */\nMandrillAPI_v1_0.prototype.tags_time_series = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('tags/time-series', [\n\t\t'tag',\n\t], params, callback);\n}\n\n/**\n * Return the recent history (hourly stats for the last 30 days) for all tags.\n *\n * @see https://mandrillapp.com/api/docs/tags.html#method=all-time-series\n */\nMandrillAPI_v1_0.prototype.tags_all_time_series = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('tags/all-time-series', [\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/******************************* Rejects Calls *******************************/\n/*****************************************************************************/\n\n/**\n * Adds an email to your email rejection blacklist. Addresses that you add\n * manually will never expire and there is no reputation penalty for removing\n * them from your blacklist. Attempting to blacklist an address that has been\n * whitelisted will have no effect.\n *\n * @see https://mandrillapp.com/api/docs/rejects.html#method=add\n */\nMandrillAPI_v1_0.prototype.rejects_add = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('rejects/add', [\n\t\t'email',\n\t], params, callback);\n}\n\n/**\n * Retrieves your email rejection blacklist. You can provide an email address\n * to limit the results. Returns up to 1000 results. By default, entries that\n * have expired are excluded from the results; set include_expired to true to\n * include them.\n *\n * @see https://mandrillapp.com/api/docs/rejects.html#method=list\n */\nMandrillAPI_v1_0.prototype.rejects_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('rejects/list', [\n\t\t'email',\n\t\t'include_expired',\n\t], params, callback);\n}\n\n/**\n * Deletes an email rejection. There is no limit to how many rejections you can\n * remove from your blacklist, but keep in mind that each deletion has an\n * affect on your reputation.\n *\n * @see https://mandrillapp.com/api/docs/rejects.html#method=delete\n */\nMandrillAPI_v1_0.prototype.rejects_delete = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('rejects/delete', [\n\t\t'email',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/***************************** Whitelists Calls ******************************/\n/*****************************************************************************/\n\n/**\n * Adds an email to your email rejection whitelist. If the address is currently\n * on your blacklist, that blacklist entry will be removed automatically.\n *\n * @see https://mandrillapp.com/api/docs/whitelists.html#method=add\n */\nMandrillAPI_v1_0.prototype.whitelists_add = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('whitelists/add', [\n\t\t'email',\n\t], params, callback);\n}\n\n/**\n * Retrieves your email rejection whitelist. You can provide an email address\n * or search prefix to limit the results. Returns up to 1000 results.\n *\n * @see https://mandrillapp.com/api/docs/whitelists.html#method=list\n */\nMandrillAPI_v1_0.prototype.whitelists_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('whitelists/list', [\n\t\t'email',\n\t], params, callback);\n}\n\n/**\n * Removes an email address from the whitelist.\n *\n * @see https://mandrillapp.com/api/docs/whitelists.html#method=delete\n */\nMandrillAPI_v1_0.prototype.whitelists_delete = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('whitelists/delete', [\n\t\t'email',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/******************************* Senders Calls *******************************/\n/*****************************************************************************/\n\n/**\n * Return the senders that have tried to use this account.\n *\n * @see https://mandrillapp.com/api/docs/senders.html#method=list\n */\nMandrillAPI_v1_0.prototype.senders_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('senders/list', [\n\t], params, callback);\n}\n\n/**\n * Returns the sender domains that have been added to this account.\n *\n * @see https://mandrillapp.com/api/docs/senders.html#method=domains\n */\nMandrillAPI_v1_0.prototype.senders_domains = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('senders/domains', [\n\t], params, callback);\n}\n\n/**\n * Return more detailed information about a single sender, including aggregates\n * of recent stats.\n *\n * @see https://mandrillapp.com/api/docs/senders.html#method=info\n */\nMandrillAPI_v1_0.prototype.senders_info = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('senders/info', [\n\t\t'address',\n\t], params, callback);\n}\n\n/**\n * Return the recent history (hourly stats for the last 30 days) for a sender.\n *\n * @see https://mandrillapp.com/api/docs/senders.html#method=time-series\n */\nMandrillAPI_v1_0.prototype.senders_time_series = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('senders/time-series', [\n\t\t'address',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/********************************* Urls Calls ********************************/\n/*****************************************************************************/\n\n/**\n * Get the 100 most clicked URLs.\n *\n * @see https://mandrillapp.com/api/docs/urls.html#method=list\n */\nMandrillAPI_v1_0.prototype.urls_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('urls/list', [\n\t], params, callback);\n}\n\n/**\n * Return the 100 most clicked URLs that match the search query given.\n *\n * @see https://mandrillapp.com/api/docs/urls.html#method=search\n */\nMandrillAPI_v1_0.prototype.urls_search = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('urls/search', [\n\t\t'q',\n\t], params, callback);\n}\n\n/**\n * Return the recent history (hourly stats for the last 30 days) for a url.\n *\n * @see https://mandrillapp.com/api/docs/urls.html#method=time-series\n */\nMandrillAPI_v1_0.prototype.urls_time_series = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('urls/time-series', [\n\t\t'url',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/****************************** Templates Calls ******************************/\n/*****************************************************************************/\n\n/**\n * Add a new template.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=add\n */\nMandrillAPI_v1_0.prototype.templates_add = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/add', [\n\t\t'name',\n\t\t'from_email',\n\t\t'from_name',\n\t\t'subject',\n\t\t'code',\n\t\t'text',\n\t\t'publish',\n\t], params, callback);\n}\n\n/**\n * Get the information for an existing template.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=info\n */\nMandrillAPI_v1_0.prototype.templates_info = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/info', [\n\t\t'name',\n\t], params, callback);\n}\n\n/**\n * Update the code for an existing template. If null is provided for any\n * fields, the values will remain unchanged.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=update\n */\nMandrillAPI_v1_0.prototype.templates_update = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/update', [\n\t\t'name',\n\t\t'from_email',\n\t\t'from_name',\n\t\t'subject',\n\t\t'code',\n\t\t'text',\n\t\t'publish',\n\t], params, callback);\n}\n\n/**\n * Publish the content for the template. Any new messages sent using this\n * template will start using the content that was previously in draft.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=publish\n */\nMandrillAPI_v1_0.prototype.templates_publish = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/publish', [\n\t\t'name',\n\t], params, callback);\n}\n\n/**\n * Delete a template.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=delete\n */\nMandrillAPI_v1_0.prototype.templates_delete = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/delete', [\n\t\t'name',\n\t], params, callback);\n}\n\n/**\n * Return a list of all the templates available to this user.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=list\n */\nMandrillAPI_v1_0.prototype.templates_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/list', [\n\t], params, callback);\n}\n\n/**\n * Return the recent history (hourly stats for the last 30 days) for a\n * template.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=time-series\n */\nMandrillAPI_v1_0.prototype.templates_time_series = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/time-series', [\n\t\t'name',\n\t], params, callback);\n}\n\n/**\n * Inject content and optionally merge fields into a template, returning the\n * HTML that results.\n *\n * @see https://mandrillapp.com/api/docs/templates.html#method=render\n */\nMandrillAPI_v1_0.prototype.templates_render = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('templates/render', [\n\t\t'template_name',\n\t\t'template_content',\n\t\t'merge_vars',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/******************************* Webhooks Calls ******************************/\n/*****************************************************************************/\n\n/**\n * Get the list of all webhooks defined on the account.\n *\n * @see https://mandrillapp.com/api/docs/webhooks.html#method=list\n */\nMandrillAPI_v1_0.prototype.webhooks_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('webhooks/list', [\n\t], params, callback);\n}\n\n/**\n * Add a new webhook.\n *\n * @see https://mandrillapp.com/api/docs/webhooks.html#method=add\n */\nMandrillAPI_v1_0.prototype.webhooks_add = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('webhooks/add', [\n\t\t'url',\n\t\t'description',\n\t\t'events',\n\t], params, callback);\n}\n\n/**\n * Given the ID of an existing webhook, return the data about it.\n *\n * @see https://mandrillapp.com/api/docs/webhooks.html#method=info\n */\nMandrillAPI_v1_0.prototype.webhooks_info = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('webhooks/info', [\n\t\t'id',\n\t], params, callback);\n}\n\n/**\n * Update an existing webhook.\n *\n * @see https://mandrillapp.com/api/docs/webhooks.html#method=update\n */\nMandrillAPI_v1_0.prototype.webhooks_update = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('webhooks/update', [\n\t\t'id',\n\t\t'url',\n\t\t'description',\n\t\t'events',\n\t], params, callback);\n}\n\n/**\n * Delete an existing webhook.\n *\n * @see https://mandrillapp.com/api/docs/webhooks.html#method=delete\n */\nMandrillAPI_v1_0.prototype.webhooks_update = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('webhooks/delete', [\n\t\t'id',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/******************************* Inbound Calls *******************************/\n/*****************************************************************************/\n\n/**\n * List the domains that have been configured for inbound delivery.\n *\n * @see https://mandrillapp.com/api/docs/inbound.html#method=domains\n */\nMandrillAPI_v1_0.prototype.inbound_domains = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('inbound/domains', [\n\t\t'domain',\n\t], params, callback);\n}\n\n/**\n * List the mailbox routes defined for an inbound domain.\n *\n * @see https://mandrillapp.com/api/docs/inbound.html#method=routes\n */\nMandrillAPI_v1_0.prototype.inbound_routes = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('inbound/routes', [\n\t\t'domain',\n\t], params, callback);\n}\n\n/**\n * Take a raw MIME document destined for a domain with inbound domains set up,\n * and send it to the inbound hook exactly as if it had been sent over SMTP.\n *\n * @see https://mandrillapp.com/api/docs/inbound.html#method=send-raw\n */\nMandrillAPI_v1_0.prototype.inbound_send_raw = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('inbound/send-raw', [\n\t\t'raw_message',\n\t\t'to',\n\t\t'mail_from',\n\t\t'helo',\n\t\t'client_address',\n\t], params, callback);\n}\n\n/*****************************************************************************/\n/******************************* Exports Calls *******************************/\n/*****************************************************************************/\n\n/**\n * Returns information about an export job. If the export job's state is\n * 'complete', the returned data will include a URL you can use to fetch the\n * results. Every export job produces a zip archive, but the format of the\n * archive is distinct for each job type. The api calls that initiate exports\n * include more details about the output format for that job type.\n *\n * @see https://mandrillapp.com/api/docs/exports.html#method=info\n */\nMandrillAPI_v1_0.prototype.exports_info = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('exports/info', [\n\t\t'id',\n\t], params, callback);\n}\n\n/**\n * Returns a list of your exports.\n *\n * @see https://mandrillapp.com/api/docs/exports.html#method=list\n */\nMandrillAPI_v1_0.prototype.exports_list = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('exports/list', [\n\t], params, callback);\n}\n\n/**\n * Begins an export of your rejection blacklist. The blacklist will be exported\n * to a zip archive containing a single file named rejects.csv that includes\n * the following fields: email, reason, detail, created_at, expires_at,\n * last_event_at, expires_at.\n *\n * @see https://mandrillapp.com/api/docs/exports.html#method=rejects\n */\nMandrillAPI_v1_0.prototype.exports_rejects = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('exports/rejects', [\n\t\t'notify_email',\n\t], params, callback);\n}\n\n/**\n * Begins an export of your rejection whitelist. The whitelist will be exported\n * to a zip archive containing a single file named whitelist.csv that includes\n * the following fields: email, detail, created_at.\n *\n * @see https://mandrillapp.com/api/docs/exports.html#method=whitelist\n */\nMandrillAPI_v1_0.prototype.exports_whitelist = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('exports/whitelist', [\n\t\t'notify_email',\n\t], params, callback);\n}\n\n/**\n * Begins an export of your activity history. The activity will be exported to\n * a zaip archive containing a single file named activity.csv in the same\n * format as you would be able to export from your account's activity view. It\n * includes the following fields: Date, Email Address, Sender, Subject, Status,\n * Tags, Opens, Clicks, Bounce Detail. If you have configured any custom\n * metadata fields, they will be included in the exported data.\n *\n * @see https://mandrillapp.com/api/docs/exports.html#method=activity\n */\nMandrillAPI_v1_0.prototype.exports_activity = function (params, callback) {\n\tif (typeof params == 'function') callback = params, params = {};\n\tthis.execute('exports/activity', [\n\t\t'notify_email',\n\t\t'date_from',\n\t\t'date_to',\n\t\t'tags',\n\t\t'senders',\n\t\t'states',\n\t], params, callback);\n}"}